{"version":3,"sources":["components/SortTable/index.tsx","pages/devtool/bizForm/components/AsyncTree/index.tsx","pages/devtool/querySchema/form/style.module.scss","components/QueryListSolution/ListSolution/style.module.scss","components/QueryListSolution/ListSolution/QuerySchemaForm/style.module.scss","components/QueryListSolution/ListSolution/QuerySchemaForm/config/style.module.scss","components/QueryListSolution/ListSolution/QueryColumnForm/config/cols.tsx","components/QueryListSolution/ListSolution/QueryColumnForm/index.tsx","components/QueryListSolution/ListSolution/QuerySchemaForm/provider/index.tsx","components/QueryListSolution/ListSolution/QuerySchemaForm/config/cols.tsx","components/QueryListSolution/ListSolution/QuerySchemaForm/index.tsx","components/QueryListSolution/ListSolution/index.tsx","pages/devtool/querySchema/form/index.tsx"],"names":["type","DragableBodyRow","index","moveRow","className","style","restProps","ref","useRef","useDrop","accept","collect","monitor","getItem","isOver","dropClassName","drop","item","useDrag","isDragging","drag","cursor","SortTable","onSort","dataSource","rest","components","body","row","useCallback","dragIndex","hoverIndex","dragRow","update","$splice","backend","HTML5Backend","onRow","record","AsyncTree","entityName","onCheck","checkedKeys","isTemplate","isMetadata","useState","treeData","setTreeData","useEffect","fetchEntity","then","data","processEntityData","handleOnCheck","e","node","loadData","key","fieldData","children","ancestors","Promise","resolve","reject","referInfo","referEntityName","childrenTreeData","updatedTreeData","updateTreeData","catch","checkable","checkStrictly","originData","prefixPath","proccessEntityFields","fields","filter","field","isPrimary","map","joinNamePath","name","title","isLeaf","isRefer","isCarry","length","bizType","aliasName","path","join","list","module","exports","onChange","handleRemove","metadata","getEntity","dataIndex","render","_val","_item","width","val","size","value","target","checked","_","onClick","QueryColumnForm","observer","props","queryColumn","updateQueryColumnItem","pathExist","removeQueryColumnItem","addItemFormQueryColumn","items","setItems","handleItemChange","this","Content","bordered","rowKey","pagination","columns","colsConfig","getSortTableProps","handleOnSort","Sider","theme","React","computed","fieldContext","undefined","FieldProvider","Provider","Consumer","entity","ValueTypeSelect","_get","getField","QuerySchemaForm","querySchema","removeQuerySchemaItem","updateQuerySchemaItem","addItemFormQuerySchema","state","selectedFieldPath","setState","fieldProviderValue","styles","paths","observable","TabPane","Tabs","TABS","Component","ListSolution","loading","activeKey","a","forceUpdate","handleTabChange","tab","presenter","init","spinning","tabsRender","TemplateContainer","getQueryColumn","getQuerySchema","ListSolutionPresenter","message","error","fetchQueryColumn","fetchQuerySchema","toJSON","id","updateQueryColumn","createQueryColumn","updateQuerySchema","createQuerySchema","success","console","params","match","mode","FormMode","Create","renderContent","handleSave"],"mappings":"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","file":"static/js/5.bbf2ec6a.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport { Table, TableProps } from 'antd';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport update from 'immutability-helper';\nimport './style.scss';\n\nconst type = 'DragableBodyRow';\n\nconst DragableBodyRow = ({ index, moveRow, className, style, ...restProps }: any) => {\n    const ref = useRef();\n    const [{ isOver, dropClassName }, drop] = useDrop({\n        accept: type,\n        collect: monitor => {\n            const { index: dragIndex } = monitor.getItem() || {} as any;\n            if (dragIndex === index) {\n                return {};\n            }\n            return {\n                isOver: monitor.isOver(),\n                dropClassName:' drop-over',\n            };\n        },\n        drop: (item: any) => {\n            moveRow(item.index, index);\n        },\n    });\n    const [, drag] = useDrag({\n        type,\n        item: { index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n    drop(drag(ref));\n\n    return (\n        <tr\n            ref={ref}\n            className={`${className}${isOver ? dropClassName : ''}`}\n            style={{ cursor: 'move', ...style }}\n            {...restProps}\n        />\n    );\n};\n\ninterface ISortTable extends TableProps<any> {\n    onSort: (data: any) => void;\n}\n\nexport const SortTable = ({ onSort, dataSource = [], ...rest }: ISortTable) => {\n    const components = {\n        body: {\n            row: DragableBodyRow,\n        },\n    };\n\n    const moveRow = useCallback(\n        (dragIndex, hoverIndex) => {\n            const dragRow = dataSource[dragIndex];\n            onSort && onSort(update(dataSource, {\n                $splice: [\n                    [dragIndex, 1],\n                    [hoverIndex, 0, dragRow],\n                ],\n            }));\n        },\n        [dataSource],\n    );\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <Table\n                {...rest}\n                dataSource={dataSource}\n                components={components}\n                className=\"sort-table\"\n                onRow={(record, index) => ({\n                    index,\n                    moveRow,\n                } as any)}\n            />\n        </DndProvider>\n    );\n};","import React, { useCallback, useEffect, useState } from 'react';\nimport { Tree, TreeNodeProps } from 'antd';\nimport { IEntity, IEntityField } from '@src/interfaces/entity';\nimport { StringUtils } from '@src/utils/stringUtils';\nimport { fetchEntity } from '@src/http';\n\ninterface IAsyncTree {\n    entityName: string;\n    onCheck: (node: TreeNodeProps) => void;\n    isTemplate?: boolean; // 是否是template编辑模式\n    isMetadata?: boolean; // 是否是metadata编辑模式\n    checkedKeys: string[]; // \n}\n\n/**\n * 当节点referInfo有值时，加载对应referEntityName的数据\n * @param param0 \n * @returns \n */\nexport const AsyncTree = ({ entityName, onCheck, isTemplate, isMetadata, checkedKeys }: IAsyncTree) => {\n    const [treeData, setTreeData] = useState([]);\n\n    useEffect(() => {\n        fetchEntity(entityName).then((data: any) => {\n            setTreeData(processEntityData(data, []));\n        })\n    }, []);\n\n    function onLoadData({ key, children, fieldData, ancestors }: TreeNodeProps) {\n        return new Promise((resolve, reject) => {\n            fetchEntity(fieldData.referInfo.referEntityName).then((data: any) => {\n                const childrenTreeData = processEntityData(data, [`${key}`], [...ancestors, fieldData]);\n                const updatedTreeData = updateTreeData(treeData, key, childrenTreeData);\n                setTreeData(updatedTreeData);\n\n                resolve(void 0);\n            })\n                .catch(() => {\n                    reject()\n                })\n        })\n    }\n\n    const handleOnCheck = useCallback((checkedKeys: string[], e) => {\n        onCheck && onCheck(e.node);\n    }, []);\n\n    return <Tree\n        checkedKeys={checkedKeys}\n        loadData={onLoadData as any}\n        treeData={treeData}\n        checkable={true}\n        checkStrictly={true}\n        onCheck={handleOnCheck as any} />;\n};\n\n/**\n * \n * @param originData \n * @param prefixPath \n * @param ancestors : 祖先节点entity\n * @returns \n */\nfunction processEntityData(originData: IEntity, prefixPath: string[] = [], ancestors : IEntity[]=[]) {\n    return proccessEntityFields(originData.fields, prefixPath, ancestors);\n}\n\nfunction proccessEntityFields(fields: IEntityField[], prefixPath: string[], ancestors : IEntity[]=[]) {\n    return fields\n        .filter(field => {\n            // 主键不能用来勾选，主键会默认自动带入不允许取消，所以不放开\n            return !field.isPrimary;\n        })\n        .map(field => {\n            const node = {\n                key: joinNamePath(prefixPath, `${field.name}`),\n                title: `${field.title}`,\n                isLeaf: true,\n                // 属性的entity数据\n                fieldData: field,\n                isRefer: false,\n                isCarry: prefixPath.length > 0,\n                ancestors: [...ancestors]\n            };\n\n            if (field.referInfo && field.bizType === \"refer\") {\n                // 外键默认展示的是id，不允许手动选择id字段，因为id通常没有特殊的业务含义\n                node.key = joinNamePath(prefixPath, `${field.referInfo.aliasName || field.name}`);\n                node.isLeaf = false;\n                node.isRefer = true;\n            }\n            return node;\n        })\n}\n\n/**\n * 拼接路径\n * @param prefixPath ： 前面的路径集合\n * @param path : 当前节点的路径\n * @returns \n */\nfunction joinNamePath(prefixPath: string[], path: string) {\n    return [...prefixPath, path].join('.');\n}\n\n/**\n * 合并treeNode数据\n * @param list \n * @param key \n * @param children \n * @returns \n */\nfunction updateTreeData(list: TreeNodeProps[] = [], key: string | number, children: TreeNodeProps[]): TreeNodeProps[] {\n    return list.map((node) => {\n        if (node.key === key) {\n            return { ...node, children };\n        }\n\n        if (node.children) {\n            return { ...node, children: updateTreeData(node.children as TreeNodeProps[], key, children) };\n        }\n\n        return node;\n    });\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"template-container\":\"style_template-container__M6blv\",\"template-content\":\"style_template-content__yO4bW\",\"template-footer\":\"style_template-footer__8zJ_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"template-container\":\"style_template-container__zjTFN\",\"template-content\":\"style_template-content__Kmcif\",\"template-footer\":\"style_template-footer__1SWrP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__mKZoL\",\"sider\":\"style_sider___eprm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"valueType\":\"style_valueType__3lc2q\"};","import { IQueryColumnItem } from \"@src/interfaces/queryColumn\";\nimport { metadata } from \"@src/metadata/metadata\";\nimport { Button, Checkbox, Input } from \"antd\";\n\ninterface ICols {\n  entityName: string;\n  onChange: (path: string, key: string, value: string | number | boolean) => void;\n  handleRemove: (path: string) => void;\n}\nexport default ({ onChange, handleRemove, entityName}: ICols) => {\n  const entity = metadata.getEntity(entityName);\n  const disabledFunc = (item: IQueryColumnItem) => {\n    const field = entity.getField(item.path);\n    if (field) {\n      return field.isSystemField;\n    }\n     // entity.getField没返回值说明就是携带字段\n    return true;\n  }\n  return [\n    {\n      dataIndex: \"index\",\n      title: \"序号\",\n      render: (_val: string, _item: IQueryColumnItem, index: number) => <span>{index + 1}</span>,\n      width: 40,\n    },\n    {\n      dataIndex: \"displayName\",\n      title: \"名称\",\n      render: (val: string, item: IQueryColumnItem) => <Input size=\"small\" value={val} onChange={(e) => onChange(item.path, 'displayName', e.target.value)} />\n    },\n    {\n      dataIndex: \"path\",\n      title: \"路径\",\n      width: 200,\n    },\n    {\n      dataIndex: \"visiable\",\n      title: \"是否显示\",\n      render: (val: boolean, item: IQueryColumnItem) => <Checkbox checked={val} onChange={(e) => onChange(item.path, 'visiable', e.target.checked)}/>\n    },\n    {\n      dataIndex: \"isContextField\",\n      title: \"上下文\",\n      render: (val: boolean, item: IQueryColumnItem) => <Checkbox checked={val} onChange={(e) => onChange(item.path, 'isContextField', e.target.checked)}/>\n    },\n    {\n      dataIndex: \"isDisabledSummary\",\n      title: \"是否允许汇总\",\n      render: (val: boolean, item: IQueryColumnItem) => <Checkbox checked={val} onChange={(e) => onChange(item.path, 'isDisabledSummary', e.target.checked)}/>\n    },\n    {\n      dataIndex: \"actions\",\n      title: \"操作\",\n      render: (_: any, record: IQueryColumnItem) => {\n        return <div>\n          <Button type=\"link\" size=\"small\" onClick={() => handleRemove(record.path)}>删除</Button>\n        </div>\n      }\n    }\n  ];\n};\n","import { Button, Layout, message, Spin, Table, TreeNodeProps } from \"antd\";\nimport * as React from \"react\";\nimport colsConfig from \"@src/components/QueryListSolution/ListSolution/QueryColumnForm/config/cols\";\nimport { QueryColumn } from \"../queryColumn\";\nimport { SortTable } from \"@src/components/SortTable\";\nimport styles from \"./style.module.scss\";\nimport { Observer, observer } from \"mobx-react\";\nimport { computed } from \"mobx\";\nimport { IQueryColumnItem } from \"@src/interfaces/queryColumn\";\nimport { AsyncTree } from \"@src/pages/devtool/bizForm/components/AsyncTree\";\n\ninterface IQueryColumnForm {\n  entityName: string;\n  queryColumn: QueryColumn;\n}\n\n@observer\nexport default class QueryColumnForm extends React.Component<IQueryColumnForm> {\n  @computed\n  get checkedKeys() {\n    return this.props.queryColumn.items.map((item) => item.path);\n  }\n\n  constructor(props: IQueryColumnForm) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  /**\n   * metadata上的bool修改为true时，tempalte上的数据应该同步更新为true\n   * 但是在交互上可能反复多次取消选中，所以暂时不做处理\n   * @param path\n   * @param key\n   * @param value\n   */\n  handleItemChange = (path: string, key: string, value: any) => {\n    this.props.queryColumn.updateQueryColumnItem(path, key, value);\n  };\n\n  handleOnCheck = (node: TreeNodeProps) => {\n    const { queryColumn } = this.props;\n    const key = node.key as string;\n    if (queryColumn.pathExist(key)) {\n      queryColumn.removeQueryColumnItem(key);\n    } else {\n      queryColumn.addItemFormQueryColumn(node);\n    }\n  };\n\n  handleOnSort = (items: IQueryColumnItem[]) => {\n    this.props.queryColumn.setItems(items);\n  };\n\n  // 删除item\n  handleRemove = (path: string) => {\n    const { queryColumn } = this.props;\n    queryColumn.removeQueryColumnItem(path);\n  };\n\n  getSortTableProps = () => {\n    return {\n      onChange: this.handleItemChange,\n      handleRemove: this.handleRemove,\n      entityName: this.props.entityName,\n    };\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Layout.Content>\n          <SortTable\n            bordered\n            size=\"small\"\n            rowKey=\"path\"\n            pagination={false}\n            dataSource={[...this.props.queryColumn.items]}\n            columns={colsConfig(this.getSortTableProps()) as any}\n            onSort={this.handleOnSort}\n          />\n        </Layout.Content>\n        <Layout.Sider style={{ width: \"400px\" }} theme=\"light\">\n          <AsyncTree\n            checkedKeys={this.checkedKeys}\n            entityName={this.props.entityName}\n            onCheck={this.handleOnCheck}\n          ></AsyncTree>\n        </Layout.Sider>\n      </Layout>\n    );\n  }\n}\n","import * as React from 'react';\n\nconst fieldContext = React.createContext(undefined)\n\nexport const FieldProvider = fieldContext.Provider;\nexport const FieldConsumer = fieldContext.Consumer;","/*\n * File: cols.tsx\n * Project: biz-form\n * File Created: Thursday, 22nd July 2021 10:57:23 pm\n * Author: zxtang (1061225829@qq.com)\n * -----\n * Last Modified: Thursday, 22nd July 2021 10:57:25 pm\n * Modified By: zxtang (1061225829@qq.com>)\n * -----\n * Copyright 2017 - 2021 Your Company, Your Company\n */\nimport { ValueTypeSelect } from \"@src/bizForm/components/QueryValueType/ValueTypeSelect\";\nimport { IQueryColumnItem } from \"@src/interfaces/queryColumn\";\nimport { metadata } from \"@src/metadata/metadata\";\nimport { Button, Checkbox, Input } from \"antd\";\nimport _get from 'lodash/get';\nimport style from './style.module.scss';\n\ninterface ICols {\n  entityName: string;\n  onChange: (path: string, key: string, value: string | number | boolean) => void;\n  handleRemove: (path: string) => void;\n}\nexport default ({ onChange, handleRemove, entityName }: ICols) => {\n  const entity = metadata.getEntity(entityName);\n  const getBizType = (path: string) => {\n    return _get(entity.getField(path), 'bizType', '');\n  }\n  const disabledFunc = (item: IQueryColumnItem) => {\n    const field = entity.getField(item.path);\n    if (field) {\n      return field.isSystemField;\n    }\n    // entity.getField没返回值说明就是携带字段\n    return true;\n  }\n  return [\n    {\n      dataIndex: \"index\",\n      title: \"序号\",\n      render: (_val: string, _item: IQueryColumnItem, index: number) => <span>{index + 1}</span>,\n      // width: 60,\n    },\n    {\n      dataIndex: \"displayName\",\n      title: \"名称\",\n      render: (val: string, item: IQueryColumnItem) => <Input size=\"small\" value={val} onChange={(e) => onChange(item.path, 'displayName', e.target.value)} />\n    },\n    {\n      dataIndex: \"valueType\",\n      title: \"类型\",\n      // width: 200,\n      render: (val: string, item: IQueryColumnItem) => <ValueTypeSelect\n        className={style['valueType']}\n        value={val}\n        path={item.path}\n        bizType={getBizType(item.path)}\n        onChange={(val) => onChange(item.path, 'valueType', val)}\n        entityName={entityName} />\n    },\n    {\n      dataIndex: \"path\",\n      title: \"路径\",\n      // width: 200,\n    },\n    {\n      dataIndex: \"isQuickQuery\",\n      title: \"快捷查询\",\n      render: (val: boolean, item: IQueryColumnItem) => <Checkbox checked={val} onChange={(e) => onChange(item.path, 'isQuickQuery', e.target.checked)}/>\n    },\n    {\n      dataIndex: \"actions\",\n      title: \"操作\",\n      render: (_: any, record: IQueryColumnItem) => {\n        return <div>\n          <Button type=\"link\" size=\"small\" onClick={() => handleRemove(record.path)}>删除</Button>\n        </div>\n      }\n    }\n  ];\n};\n","import * as React from \"react\";\nimport { Observer, observer } from \"mobx-react\";\nimport { Button, Layout, TreeNodeProps } from \"antd\";\nimport { Sider } from \"./Sider\";\nimport { computed, makeAutoObservable, observable, reaction } from \"mobx\";\nimport { TemplateFormContent } from \"./Content\";\n\nimport styles from \"./style.module.scss\";\nimport { FieldProvider } from \"./provider\";\nimport { SortTable } from \"@src/components/SortTable\";\nimport colsConfig from \"@src/components/QueryListSolution/ListSolution/QuerySchemaForm/config/cols\";\nimport { QuerySchema } from \"../querySchema\";\nimport { AsyncTree } from \"@src/pages/devtool/bizForm/components/AsyncTree\";\nimport { IQuerySchemaItem } from \"@src/interfaces/queryScheme\";\ninterface ITemplateForm {\n  entityName: string;\n  querySchema: QuerySchema;\n}\n\n@observer\nexport class QuerySchemaForm extends React.Component<ITemplateForm, any> {\n\n  @observable\n  private selectedFieldPath: string;\n\n  @computed\n  get selectedKeys() {\n    return this.props.querySchema;\n  }\n\n  // @computed\n  // get querySchema(): QuerySchema {\n  //   return this.props.querySchema;\n  // }\n\n  get fieldProviderValue() {\n    return {\n      selectedFieldPath: this.state.selectedFieldPath,\n      onClick: (path: string) => {\n        this.setState({\n          selectedFieldPath: path,\n        })\n      }\n    }\n  }\n\n  constructor(props: ITemplateForm) {\n    super(props);\n    this.state = {\n      selectedFieldPath: ''\n    }\n  }\n\n  handleOnSort = (items: IQuerySchemaItem[]) => {\n    this.props.querySchema.setItems(items);\n  };\n\n  // 删除item\n  handleRemove = (path: string) => {\n    const { querySchema } = this.props;\n    querySchema.removeQuerySchemaItem(path);\n  };\n\n  getSortTableProps = () => {\n    return {\n      onChange: this.handleItemChange,\n      handleRemove: this.handleRemove,\n      entityName: this.props.entityName,\n    };\n  };\n\n  handleItemChange = (path: string, key: string, value: any) => {\n    this.props.querySchema.updateQuerySchemaItem(path, key, value);\n  };\n  \n  handleOnCheck = (node: TreeNodeProps) => {\n    const { querySchema } = this.props;\n    const key = node.key as string;\n    if (querySchema.pathExist(key)) {\n      querySchema.removeQuerySchemaItem(key);\n    } else {\n      querySchema.addItemFormQuerySchema(node);\n    }\n  };\n\n\n  render() {\n\n    if (!this.props.querySchema) {\n      return null;\n    }\n\n    return (\n      <FieldProvider value={this.fieldProviderValue}>\n        <Layout className={styles[\"container\"]}>\n          <Layout.Content className={styles[\"content\"]}>\n            <SortTable\n              bordered\n              size=\"small\"\n              rowKey=\"path\"\n              pagination={false}\n              dataSource={[...this.props.querySchema.items]}\n              columns={colsConfig(this.getSortTableProps()) as any}\n              onSort={this.handleOnSort}\n            />\n          </Layout.Content>\n          <Layout.Sider theme=\"light\" className={styles[\"sider\"]}>\n            <AsyncTree\n              checkedKeys={this.props.querySchema.paths()}\n              entityName={this.props.entityName}\n              onCheck={this.handleOnCheck}\n            ></AsyncTree>\n          </Layout.Sider>\n        </Layout>\n      </FieldProvider>\n    );\n  }\n}\n","\nimport { message, Spin, TreeNodeProps } from \"antd\";\nimport * as React from \"react\";\nimport { FormMode } from \"@src/bizForm/formMode\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Tabs } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport styles from \"./style.module.scss\";\n\nimport QueryColumnForm from \"./QueryColumnForm\";\nimport { IQueryColumnItem } from \"@src/interfaces/queryColumn\";\nimport { QuerySchemaForm } from \"./QuerySchemaForm\";\nimport { ListSolutionPresenter } from \"../listSolutionPresenter\";\n\nconst { TabPane } = Tabs;\n\ninterface IListSolution {\n  presenter: ListSolutionPresenter;\n}\n\nconst TABS = [\n  {\n    key: \"queryColumn\",\n    title: \"列表项\",\n    Component: QueryColumnForm,\n  },\n  {\n    key: \"querySchema\",\n    title: \"查询项\",\n    Component: QuerySchemaForm,\n  },\n];\n\n@observer\nexport default class ListSolution extends React.Component<\nIListSolution,\nany\n> {\n  private presenter: ListSolutionPresenter;\n\n  state = {\n    loading: true,\n    activeKey: \"queryColumn\",\n  };\n\n  get entityName() {\n    return this.presenter.entityName;\n  }\n\n  get queryColumn() {\n    return this.presenter.queryColumn;\n  }\n\n  get querySchema() {\n    return this.presenter.querySchema;\n  }\n\n  constructor(props: IListSolution) {\n    super(props);\n    this.presenter = props.presenter;\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init = async () => {\n    try {\n      // metadata所有的template公用同一个，所以template为创建模式时，metadata可能已经存在了\n      // await this.getQueryColumn();\n      // await this.getQuerySchema();\n    } catch (err) {\n      message.error(\"初始化失败\");\n    } finally {\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  handleItemChange = (path: string, key: string, value: any) => {\n    this.queryColumn.updateQueryColumnItem(path, key, value);\n  };\n\n  handleOnCheck = (node: TreeNodeProps) => {\n    this.queryColumn.addItemFormQueryColumn(node);\n    this.forceUpdate();\n  };\n\n  handleOnSort = (items: IQueryColumnItem[]) => {\n    this.queryColumn.setItems(items);\n    this.forceUpdate();\n  };\n\n  handleSave = async () => {\n\n  };\n\n  handleTabChange = (activeKey: string) => {\n    this.setState({\n      activeKey,\n    });\n  };\n\n  tabsRender = () => {\n    const { activeKey } = this.state;\n    return (\n      <Tabs activeKey={activeKey} onChange={this.handleTabChange}>\n        {TABS.map(({ title, key, Component }: any) => {\n          return <TabPane tab={title} key={key}>\n            <Component\n              entityName={this.entityName}\n              queryColumn={this.queryColumn}\n              querySchema={this.querySchema}\n            />\n          </TabPane>\n        })}\n      </Tabs>\n    );\n  };\n\n  render() {\n    if (!this.queryColumn) {\n      return null;\n    }\n    return (\n      <Spin className={styles[\"template-container\"]} spinning={!this.queryColumn}>\n        {this.tabsRender()}\n      </Spin>\n    );\n  }\n}","\nimport { Button, message, Spin } from \"antd\";\nimport * as React from \"react\";\nimport { FormMode } from \"@src/bizForm/formMode\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Tabs } from \"antd\";\nimport { Observer, observer } from \"mobx-react\";\nimport styles from \"./style.module.scss\";\n\nimport { createQueryColumn, fetchQueryColumn, updateQueryColumn } from \"@src/http/queryColumn\";\nimport { } from \"@src/http/queryColumn\";\nimport { createQuerySchema, fetchQuerySchema, updateQuerySchema } from \"@src/http/querySchema\";\nimport { IQueryColumn } from \"@src/interfaces/queryColumn\";\nimport { RouteUtils } from \"@src/router/routeUtils\";\nimport { IQuerySchema } from \"@src/interfaces/queryScheme\";\nimport { ListSolutionPresenter } from \"@src/components/QueryListSolution/listSolutionPresenter\";\nimport ListSolution from \"@src/components/QueryListSolution/ListSolution\";\n\nconst { TabPane } = Tabs;\ninterface IRouteParams {\n  mode: string;\n  entityName: string;\n}\ninterface IMetaDataForm extends RouteComponentProps<IRouteParams> { }\n\n@observer\nexport default class TemplateContainer extends React.Component<\nIMetaDataForm,\nany\n> {\n  private entityName: string;\n\n  private queryColumn: IQueryColumn = undefined;\n\n  private querySchema: IQuerySchema = undefined;\n\n  private mode: FormMode;\n\n  private presenter: ListSolutionPresenter;\n\n\n  constructor(props: IMetaDataForm) {\n    super(props);\n    const {\n      match: { params },\n    } = props;\n\n    this.state = {\n      loading: true,\n    };\n\n    this.entityName = params.entityName;\n    this.mode = params.mode as FormMode || FormMode.Create;\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init = async () => {\n    try {\n      // metadata所有的template公用同一个，所以template为创建模式时，metadata可能已经存在了\n      await this.getQueryColumn();\n      await this.getQuerySchema();\n\n      this.presenter = new ListSolutionPresenter({\n        entityName: this.entityName,\n        querySchema: this.querySchema,\n        queryColumn: this.queryColumn,\n      })\n    } catch (err) {\n      message.error(\"初始化失败\");\n    } finally {\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  getQueryColumn = async () => {\n    let queryColumn: IQueryColumn = await fetchQueryColumn(this.entityName)\n\n    if (!queryColumn) {\n      queryColumn = {\n        entityName: this.entityName,\n        items: [],\n      }\n    }\n    this.queryColumn = queryColumn;\n  }\n\n  getQuerySchema = async () => {\n    let querySchema: IQuerySchema = await fetchQuerySchema(this.entityName);\n    if (!querySchema) {\n      querySchema = {\n        entityName: this.entityName,\n        items: [],\n      }\n    }\n    this.querySchema = querySchema;\n  }\n\n  handleSave = async () => {\n    const { queryColumn, querySchema } = this.presenter.toJSON()\n    try {\n      if (queryColumn.id ) {\n        await updateQueryColumn(queryColumn);\n      } else {\n        await createQueryColumn(queryColumn);\n      }\n      if (querySchema.id) {\n        await updateQuerySchema(querySchema);\n      } else {\n        await createQuerySchema(querySchema);\n      }\n      message.success(\"保存成功\");\n    } catch (err) {\n      console.error(err);\n      message.error(\"保存失败\");\n    }\n  };\n\n  renderContent = () => {\n    return <Observer>\n      {\n        () => <ListSolution presenter={this.presenter} />\n      }\n    </Observer>;\n  }\n\n  render() {\n    if (this.state.loading && !this.presenter) {\n      return null;\n    }\n    return (\n      <Spin className={styles[\"template-container\"]} spinning={!this.queryColumn}>\n        {this.renderContent()}\n        <div className={styles[\"template-footer\"]}>\n          <Button type=\"primary\" onClick={this.handleSave}>\n            保存\n          </Button>\n        </div>\n      </Spin>\n    );\n  }\n}"],"sourceRoot":""}