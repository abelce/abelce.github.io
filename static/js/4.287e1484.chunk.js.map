{"version":3,"sources":["components/SortTable/index.tsx","pages/devtool/bizForm/components/AsyncTree/index.tsx","pages/devtool/bizForm/form/TemplateForm/Settings/style.module.scss","pages/devtool/bizForm/form/TemplateForm/Sider/ChildTable/style.module.scss","pages/devtool/bizForm/form/TemplateForm/Content/style.module.scss","components/DragForm/style.module.scss","pages/devtool/bizForm/form/TemplateForm/Content/Section/style.module.scss","pages/devtool/bizForm/form/TemplateForm/style.module.scss","pages/devtool/bizForm/form/style.module.scss","pages/devtool/bizForm/form/TemplateForm/Sider/index.tsx","pages/devtool/bizForm/form/metadata.ts","pages/devtool/bizForm/components/TemplateTree/index.tsx","pages/devtool/bizForm/form/TemplateForm/FieldsModal/index.tsx","pages/devtool/bizForm/form/TemplateForm/provider/index.tsx","pages/devtool/bizForm/form/TemplateForm/Settings/index.tsx","pages/devtool/bizForm/form/TemplateForm/Sider/ChildTable/index.tsx","../node_modules/@ant-design/icons-svg/es/asn/SettingOutlined.js","../node_modules/@ant-design/icons/es/icons/SettingOutlined.js","pages/devtool/bizForm/form/template.ts","components/DragForm/index.tsx","pages/devtool/bizForm/form/TemplateForm/Content/Section/index.tsx","pages/devtool/bizForm/form/TemplateForm/Content/index.tsx","pages/devtool/bizForm/form/TemplateForm/index.tsx","pages/devtool/bizForm/form/config/cols.tsx","pages/devtool/bizForm/form/MetadataForm/index.tsx","pages/devtool/bizForm/form/index.tsx"],"names":["type","DragableBodyRow","index","moveRow","className","style","restProps","ref","useRef","useDrop","accept","collect","monitor","getItem","isOver","dropClassName","drop","item","useDrag","isDragging","drag","cursor","SortTable","onSort","dataSource","rest","components","body","row","useCallback","dragIndex","hoverIndex","dragRow","update","$splice","backend","HTML5Backend","onRow","record","AsyncTree","entityName","onCheck","checkedKeys","isTemplate","isMetadata","useState","treeData","setTreeData","useEffect","fetchEntity","then","data","processEntityData","handleOnCheck","e","node","loadData","key","fieldData","children","ancestors","Promise","resolve","reject","referInfo","referEntityName","childrenTreeData","updatedTreeData","updateTreeData","catch","checkable","checkStrictly","originData","prefixPath","proccessEntityFields","fields","filter","field","isPrimary","map","joinNamePath","name","title","isLeaf","isRefer","isCarry","length","bizType","aliasName","path","join","list","module","exports","TabEnum","Metadata","require","items","this","find","some","displayName","ancestor","alwaysHidden","required","readonly","isMulti","isSystemField","push","value","findIndex","MetaDataUtils","makeAutoObservable","createMetaData","metadata","id","TemplateTree","observer","FieldsModal","props","template","reset","React","currentSection","pathExist","removeTemplateColumn","addColumnFormMetadata","footer","currentSectionPaths","fieldContext","undefined","FieldProvider","Provider","FieldConsumer","Consumer","Settings","selectedFieldPath","handleChange","updateTemplateColumn","getField","metadataItem","styles","size","defaultValue","onBlur","target","checked","onChange","disabled","Option","ChildTable","entity","getEntity","reduce","prev","rootPath","split","isDetail","referType","onClick","appendChildSection","handleChildTableSelect","TabPane","Tabs","Sider","FieldInfo","activeKey","setActiveKey","Modals","show","currentSectionId","PlusOutlined","tab","SettingOutlined","AntdIcon","Object","assign","icon","SettingOutlinedSvg","TempalteLayout","FormItem","Form","Item","DragFormItem","moveItem","column","handlerId","getHandlerId","hover","console","log","opacity","span","colSpan","cx","label","Section","columns","updateColumns","section","appendMasterSection","col","model","mode","FormMode","Create","onMouseDown","handleSectionClick","BizSection","leftElement","placeholder","handleTitleChange","rightElement","DeleteOutlined","removeMasterSection","placement","PlusSquareOutlined","handAddSection","content","gutter","matchComponent","componentPropsWrapper","TemplateFormContent","master","childTables","DndProvider","layout","TemplateForm","state","setState","fieldProviderValue","Content","theme","observable","computed","handleRemove","disabledFunc","dataIndex","render","_val","_item","width","val","_","MetadataForm","updateMetaDataItem","removeMetaDataItem","addItemFormMetadata","setItems","removeFieldFormSection","handleItemChange","bordered","rowKey","pagination","colsConfig","getSortTableProps","handleOnSort","Template","Vertical","init","flat","Infinity","table","masterSection","TemplateSection","forEach","uuidv4","TemplateUtils","Array","isArray","setMaster","setChildTables","TemplateContainer","a","getMetadata","getTemplate","message","error","loading","fetchMetadata","wrapperMetadata","createObservableMetadata","createObservableTemplate","Edit","fetchTemplate","result","wrapperTemplate","forceUpdate","updateMetadata","createMetadata","updateTemplate","createTemplate","success","tabs","handleTabChange","Component","params","match","spinning","tabsRender","handleSave"],"mappings":"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","file":"static/js/4.287e1484.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport { Table, TableProps } from 'antd';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport update from 'immutability-helper';\nimport './style.scss';\n\nconst type = 'DragableBodyRow';\n\nconst DragableBodyRow = ({ index, moveRow, className, style, ...restProps }: any) => {\n    const ref = useRef();\n    const [{ isOver, dropClassName }, drop] = useDrop({\n        accept: type,\n        collect: monitor => {\n            const { index: dragIndex } = monitor.getItem() || {} as any;\n            if (dragIndex === index) {\n                return {};\n            }\n            return {\n                isOver: monitor.isOver(),\n                dropClassName:' drop-over',\n            };\n        },\n        drop: (item: any) => {\n            moveRow(item.index, index);\n        },\n    });\n    const [, drag] = useDrag({\n        type,\n        item: { index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n    drop(drag(ref));\n\n    return (\n        <tr\n            ref={ref}\n            className={`${className}${isOver ? dropClassName : ''}`}\n            style={{ cursor: 'move', ...style }}\n            {...restProps}\n        />\n    );\n};\n\ninterface ISortTable extends TableProps<any> {\n    onSort: (data: any) => void;\n}\n\nexport const SortTable = ({ onSort, dataSource = [], ...rest }: ISortTable) => {\n    const components = {\n        body: {\n            row: DragableBodyRow,\n        },\n    };\n\n    const moveRow = useCallback(\n        (dragIndex, hoverIndex) => {\n            const dragRow = dataSource[dragIndex];\n            onSort && onSort(update(dataSource, {\n                $splice: [\n                    [dragIndex, 1],\n                    [hoverIndex, 0, dragRow],\n                ],\n            }));\n        },\n        [dataSource],\n    );\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <Table\n                {...rest}\n                dataSource={dataSource}\n                components={components}\n                className=\"sort-table\"\n                onRow={(record, index) => ({\n                    index,\n                    moveRow,\n                } as any)}\n            />\n        </DndProvider>\n    );\n};","import React, { useCallback, useEffect, useState } from 'react';\nimport { Tree, TreeNodeProps } from 'antd';\nimport { IEntity, IEntityField } from '@src/interfaces/entity';\nimport { StringUtils } from '@src/utils/stringUtils';\nimport { fetchEntity } from '@src/http';\n\ninterface IAsyncTree {\n    entityName: string;\n    onCheck: (node: TreeNodeProps) => void;\n    isTemplate?: boolean; // 是否是template编辑模式\n    isMetadata?: boolean; // 是否是metadata编辑模式\n    checkedKeys: string[]; // \n}\n\n/**\n * 当节点referInfo有值时，加载对应referEntityName的数据\n * @param param0 \n * @returns \n */\nexport const AsyncTree = ({ entityName, onCheck, isTemplate, isMetadata, checkedKeys }: IAsyncTree) => {\n    const [treeData, setTreeData] = useState([]);\n\n    useEffect(() => {\n        fetchEntity(entityName).then((data: any) => {\n            setTreeData(processEntityData(data, []));\n        })\n    }, []);\n\n    function onLoadData({ key, children, fieldData, ancestors }: TreeNodeProps) {\n        return new Promise((resolve, reject) => {\n            fetchEntity(fieldData.referInfo.referEntityName).then((data: any) => {\n                const childrenTreeData = processEntityData(data, [`${key}`], [...ancestors, fieldData]);\n                const updatedTreeData = updateTreeData(treeData, key, childrenTreeData);\n                setTreeData(updatedTreeData);\n\n                resolve(void 0);\n            })\n                .catch(() => {\n                    reject()\n                })\n        })\n    }\n\n    const handleOnCheck = useCallback((checkedKeys: string[], e) => {\n        onCheck && onCheck(e.node);\n    }, []);\n\n    return <Tree\n        checkedKeys={checkedKeys}\n        loadData={onLoadData as any}\n        treeData={treeData}\n        checkable={true}\n        checkStrictly={true}\n        onCheck={handleOnCheck as any} />;\n};\n\n/**\n * \n * @param originData \n * @param prefixPath \n * @param ancestors : 祖先节点entity\n * @returns \n */\nfunction processEntityData(originData: IEntity, prefixPath: string[] = [], ancestors : IEntity[]=[]) {\n    return proccessEntityFields(originData.fields, prefixPath, ancestors);\n}\n\nfunction proccessEntityFields(fields: IEntityField[], prefixPath: string[], ancestors : IEntity[]=[]) {\n    return fields\n        .filter(field => {\n            // 主键不能用来勾选，主键会默认自动带入不允许取消，所以不放开\n            return !field.isPrimary;\n        })\n        .map(field => {\n            const node = {\n                key: joinNamePath(prefixPath, `${field.name}`),\n                title: `${field.title}`,\n                isLeaf: true,\n                // 属性的entity数据\n                fieldData: field,\n                isRefer: false,\n                isCarry: prefixPath.length > 0,\n                ancestors: [...ancestors]\n            };\n\n            if (field.referInfo && field.bizType === \"refer\") {\n                // 外键默认展示的是id，不允许手动选择id字段，因为id通常没有特殊的业务含义\n                node.key = joinNamePath(prefixPath, `${field.referInfo.aliasName || field.name}`);\n                node.isLeaf = false;\n                node.isRefer = true;\n            }\n            return node;\n        })\n}\n\n/**\n * 拼接路径\n * @param prefixPath ： 前面的路径集合\n * @param path : 当前节点的路径\n * @returns \n */\nfunction joinNamePath(prefixPath: string[], path: string) {\n    return [...prefixPath, path].join('.');\n}\n\n/**\n * 合并treeNode数据\n * @param list \n * @param key \n * @param children \n * @returns \n */\nfunction updateTreeData(list: TreeNodeProps[] = [], key: string | number, children: TreeNodeProps[]): TreeNodeProps[] {\n    return list.map((node) => {\n        if (node.key === key) {\n            return { ...node, children };\n        }\n\n        if (node.children) {\n            return { ...node, children: updateTreeData(node.children as TreeNodeProps[], key, children) };\n        }\n\n        return node;\n    });\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"style_settings__3qqpM\",\"field-item\":\"style_field-item__1sgSD\",\"field-item-title\":\"style_field-item-title__2q5UK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"child-list-item\":\"style_child-list-item__1B3Ad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3xnij\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"style_column__3OTWc\",\"cloumn-setting\":\"style_cloumn-setting__1TyeE\",\"drop-over\":\"style_drop-over__oBtFf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"template-section\":\"style_template-section__bCJWN\",\"template-section_selected\":\"style_template-section_selected__3r_mE\",\"template-section_actions\":\"style_template-section_actions__LVQDn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3ciRw\",\"sider\":\"style_sider__2_Vpk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"template-container\":\"style_template-container__2F8bx\",\"template-content\":\"style_template-content__1j3Ir\",\"template-footer\":\"style_template-footer__Bl03a\"};","import {Modals} from '@src/components/Modals';\nimport {Button} from 'antd';\nimport {Tabs} from 'antd';\nimport {observer} from 'mobx-react';\nimport React, {useState} from 'react';\nimport {Metadata} from '../../metadata';\nimport {Template} from '../../template';\nimport {FieldsModal} from '../FieldsModal';\nimport {FieldConsumer} from '../provider';\nimport {Settings} from '../Settings';\nimport {PlusOutlined} from '@ant-design/icons';\nimport {ChildTable} from './ChildTable';\nconst TabPane = Tabs.TabPane;\n\nenum TabEnum {\n  FieldInfo = 'FieldInfo', // 字段信息\n  ChildTable = 'ChildTable', // 子表\n}\ninterface ISider {\n  entityName: string;\n  metadata: Metadata;\n  template: Template;\n}\n\nexport const Sider = observer((props: ISider) => {\n  const {metadata, template, entityName} = props;\n  const [activeKey, setActiveKey] = useState<TabEnum>(TabEnum.FieldInfo);\n\n  const handleAppendFields = () => {\n    Modals.show(FieldsModal, {\n      metadata: metadata,\n      template: template,\n      entityName: entityName,\n    });\n  };\n\n  const handleTabChange = (activeKey: string) => {\n    setActiveKey(activeKey as TabEnum);\n  };\n\n  return (\n    <div>\n      <div>\n        <Button type=\"primary\" onClick={handleAppendFields} disabled={!template.currentSectionId}>\n          <PlusOutlined />\n          设置显示项\n        </Button>\n      </div>\n      <Tabs size=\"small\" activeKey={activeKey} onChange={handleTabChange}>\n        <TabPane tab=\"字段设置\" key={TabEnum.FieldInfo}>\n          <FieldConsumer>\n            {({selectedFieldPath}) =>\n              selectedFieldPath && (\n                <Settings metadata={metadata} template={template} selectedFieldPath={selectedFieldPath} />\n              )\n            }\n          </FieldConsumer>\n        </TabPane>\n        <TabPane tab=\"明细表\" key={TabEnum.ChildTable}>\n          <ChildTable metadata={metadata} template={template} />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n});\n","import { IEntity, IEntityField } from \"@src/interfaces/entity\";\nimport { IMetadataItem } from \"@src/interfaces/metadata\";\nimport { IMetadata } from \"@src/interfaces/metadata\";\nimport { TreeNodeProps } from \"antd\";\nimport { makeAutoObservable } from \"mobx\";\n\nconst _ = {\n  set: require(\"lodash/set\"),\n};\n\nexport class Metadata {\n  public id?: string;\n\n  public getItem(path: string):  IMetadataItem{\n    return this.items.find(item => item.path === path);\n  }\n\n  public getItems() {\n    return this.items;\n  }\n\n  public setItems(data: IMetadataItem[]) {\n    this.items = data;\n  }\n\n  constructor(public entityName: string, public items: IMetadataItem[]) {\n    // makeAutoObservable(this);\n  }\n\n  public pathExist(path: string) {\n    return this.items.some((item) => item.path === path);\n  }\n\n  //  通过AsyncTree添加新的item数据\n  public addItemFormMetadata(data: TreeNodeProps) {\n    const item: IMetadataItem = {\n      path: data.key as string,\n      displayName: [...data.ancestors.map((ancestor: IEntity) => ancestor.title), data.title].join('/'),\n      alwaysHidden: false,\n      required: false,\n      readonly:  data.isCarry || false, // 如果字段是携带，则不容许编辑，只能读\n      isMulti: false,\n      isSystemField: data.fieldData.isSystemField\n    };\n    // 系统参数只能允许后台设置数据，前端不允许编辑\n    if (data.fieldData.isSystemField) {\n      item.readonly = true;\n      item.required = false;\n    }\n    this.items.push(item);\n  }\n\n  // 更新item的数据\n  public updateMetaDataItem(\n    path: string,\n    key: string,\n    value: string | number | boolean\n  ) {\n    const index = this.items.findIndex((item) => item.path === path);\n    if (index > -1) {\n      this.items[index] = {\n        ...this.items[index],\n        [key]: value,\n      };\n    }\n  }\n\n  // 删除item\n  public removeMetaDataItem(path: string) {\n    this.items = this.items.filter((item) => item.path !== path);\n  }\n}\n\nexport class MetaDataUtils {\n  static createObservableMetadata(entityName: string): Metadata {\n    return makeAutoObservable(MetaDataUtils.createMetaData(entityName));\n  }\n  static createMetaData(entityName: string): Metadata {\n    return new Metadata(entityName, []);\n  }\n\n  static wrapperMetadata(data: Metadata) {\n    const metadata = new Metadata(data.entityName, []);\n    metadata.id = data.id;\n    metadata.items = data.items || [];\n\n    return makeAutoObservable(metadata);\n  }\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Tree, TreeNodeProps } from 'antd';\nimport { IEntity, IEntityField } from '@src/interfaces/entity';\nimport { StringUtils } from '@src/utils/stringUtils';\nimport { Metadata } from '../../form/metadata';\nimport { observer } from 'mobx-react';\n\ninterface IAsyncTree {\n    entityName: string;\n    onCheck: (node: TreeNodeProps) => void;\n    metadata: Metadata;\n    checkedKeys?: string[];\n}\n\n/**\n * 当节点referInfo有值时，加载对应referEntityName的数据\n * @param param0 \n * @returns \n */\nexport const TemplateTree = observer(({ entityName, onCheck, metadata, checkedKeys }: IAsyncTree) => {\n    // const [treeData, setTreeData] = useState([]);\n\n    // // 转换metadata的数据为tree，然后设置模板的数据\n    // useEffect(() => {\n    //     const { items = [] } = metadata;\n    //     const treeNodes = items.map(item => ({\n    //         key: item.path,\n    //         title: item.displayName,\n    //         isLeaf: true,\n    //         // 属性的entity数据\n    //         fieldData: item,\n    //     }))\n\n    //     setTreeData(treeNodes);\n    // }, [metadata]);\n    const { items = [] } = metadata;\n    const treeData = items.map(item => ({\n        key: item.path,\n        title: item.displayName,\n        isLeaf: true,\n        // 属性的entity数据\n        fieldData: item,\n    }))\n\n\n    const handleOnCheck = useCallback((checkedKeys: string[], e) => {\n        onCheck && onCheck(e.node);\n    }, []);\n\n    return <Tree\n        checkedKeys={checkedKeys}\n        treeData={treeData}\n        checkable={true}\n        checkStrictly={true}\n        onCheck={handleOnCheck as any} />;\n});","import { TemplateTree } from \"@src/pages/devtool/bizForm/components/TemplateTree\";\nimport { Modal } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { Metadata } from \"../../metadata\";\nimport { Template } from \"../../template\";\n\nexport interface IFieldsModal {\n  entityName: string;\n  template: Template;\n  metadata: Metadata;\n}\n\nexport const FieldsModal: React.FC<IFieldsModal> = observer((props) => {\n  const { entityName, template, metadata, ...reset } = props;\n  const onCheck = React.useCallback((e) => {\n      if (props.template.currentSection?.pathExist(e.fieldData.path)) {\n          props.template.currentSection?.removeTemplateColumn(e.fieldData.path);\n      } else {\n          props.template.currentSection?.addColumnFormMetadata(e.fieldData);\n      }\n  }, [props.template]);\n\n  return (\n    <Modal footer={null} {...reset}>\n      <TemplateTree entityName={props.entityName} checkedKeys={props.template.currentSectionPaths} onCheck={onCheck} metadata={props.metadata} />\n    </Modal>\n  );\n});\n","import * as React from 'react';\n\nconst fieldContext = React.createContext(undefined)\n\nexport const FieldProvider = fieldContext.Provider;\nexport const FieldConsumer = fieldContext.Consumer;","// template字段的设置组件\n\nimport { IMetadataItem } from \"@src/interfaces/metadata\";\nimport { ITemplateColumn } from \"@src/interfaces/template\";\nimport { Checkbox, Input, Select } from \"antd\";\nimport { observer } from \"mobx-react\";\nimport React, { useCallback, useMemo } from \"react\"\nimport { Metadata } from \"../../metadata\";\nimport { Template } from \"../../template\"\nimport styles from './style.module.scss';\n\nexport interface ISettings {\n    template: Template;\n    metadata: Metadata;\n    selectedFieldPath: string;\n}\n\nexport const Settings = observer((props: ISettings) => {\n    const { metadata, template, selectedFieldPath } = props;\n\n    const handleChange = (key: string, value: string | number | boolean) => {\n        template.currentSection && template.currentSection.updateTemplateColumn(selectedFieldPath, key, value);\n    };\n\n    if (!template.currentSection) {\n        return null;\n    }\n\n    const field: ITemplateColumn = template.currentSection.getField(selectedFieldPath);\n\n    const metadataItem: IMetadataItem = metadata.getItem(selectedFieldPath);\n\n    if (!field) {\n        return null;\n    }\n\n    return <div className={styles['settings']} key={selectedFieldPath}>\n        <div className={styles['field-item']}>\n            <span className={styles['field-item-title']}>显示名称:</span>\n            <span className={styles['field-item-body']}>\n                <Input size=\"small\" defaultValue={field[\"displayName\"]} onBlur={(e) => handleChange('displayName', e.target.value)} />\n            </span>\n        </div>\n        <div className={styles['field-item']}>\n            <span className={styles['field-item-title']}>是否必填:</span>\n            <span className={styles['field-item-body']}>\n                <Checkbox checked={field[\"required\"]} onChange={(e) => handleChange('required', e.target.checked)} disabled={metadataItem['required']}/>\n            </span>\n        </div>\n        <div className={styles['field-item']}>\n            <span className={styles['field-item-title']}>是否只读:</span>\n            <span className={styles['field-item-body']}>\n                <Checkbox checked={field[\"readonly\"]} onChange={(e) => handleChange('readonly', e.target.checked)} disabled={metadataItem['readonly']}/>\n            </span>\n        </div>\n        <div className={styles['field-item']}>\n            <span className={styles['field-item-title']}>宽度:</span>\n            <span className={styles['field-item-body']}>\n                <Select \n                value={field[\"colSpan\"]} \n                onChange={(value) => handleChange('colSpan', value)}>\n                    <Select.Option value={1}>25%</Select.Option>\n                    <Select.Option value={2}>50%</Select.Option>\n                    <Select.Option value={3}>75%</Select.Option>\n                    <Select.Option value={4}>100%</Select.Option>\n                </Select>\n            </span>\n        </div>\n    </div>\n})","import * as React from 'react';\nimport {Tree} from 'antd';\nimport {Metadata} from '../../../metadata';\nimport {Template} from '../../../template';\nimport {metadata} from '@src/metadata/metadata';\nimport styles from './style.module.scss';\n\ninterface ChildTableProps {\n  //   entityName: string;\n  metadata: Metadata;\n  template: Template;\n}\n\ntype Item = {\n  title: string;\n  entityName: string;\n  path: string;\n};\n\nexport const ChildTable = (props: ChildTableProps) => {\n  //   const {metadata, template} = props;\n  const entity = metadata.getEntity(props.metadata.entityName);\n  const list: Array<Item> = [];\n  props.metadata.items.reduce((prev, item) => {\n    const rootPath = item.path.split('.')[0];\n    if (!prev[rootPath] && entity.getField(rootPath) && entity.getField(rootPath).isDetail) {\n      prev[rootPath] = {\n        entityName: entity.getField(rootPath).referType,\n        title: entity.getField(rootPath).title,\n        path: rootPath,\n      };\n      list.push(prev[rootPath]);\n    }\n    return prev;\n  }, {} as {[key: string]: Item});\n\n  const handleChildTableSelect = (item: Item) => {\n    props.template.appendChildSection(item);\n  }\n\n  return (\n    <div className={styles['child-list']}>\n      {list.map((item) => (\n        <div className={styles['child-list-item']} key={item.path} onClick={() => handleChildTableSelect(item)}>{`${item.title}(${item.path})`}</div>\n      ))}\n    </div>\n  );\n};\n","// This icon file is generated automatically.\nvar SettingOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M924.8 625.7l-65.5-56c3.1-19 4.7-38.4 4.7-57.8s-1.6-38.8-4.7-57.8l65.5-56a32.03 32.03 0 009.3-35.2l-.9-2.6a443.74 443.74 0 00-79.7-137.9l-1.8-2.1a32.12 32.12 0 00-35.1-9.5l-81.3 28.9c-30-24.6-63.5-44-99.7-57.6l-15.7-85a32.05 32.05 0 00-25.8-25.7l-2.7-.5c-52.1-9.4-106.9-9.4-159 0l-2.7.5a32.05 32.05 0 00-25.8 25.7l-15.8 85.4a351.86 351.86 0 00-99 57.4l-81.9-29.1a32 32 0 00-35.1 9.5l-1.8 2.1a446.02 446.02 0 00-79.7 137.9l-.9 2.6c-4.5 12.5-.8 26.5 9.3 35.2l66.3 56.6c-3.1 18.8-4.6 38-4.6 57.1 0 19.2 1.5 38.4 4.6 57.1L99 625.5a32.03 32.03 0 00-9.3 35.2l.9 2.6c18.1 50.4 44.9 96.9 79.7 137.9l1.8 2.1a32.12 32.12 0 0035.1 9.5l81.9-29.1c29.8 24.5 63.1 43.9 99 57.4l15.8 85.4a32.05 32.05 0 0025.8 25.7l2.7.5a449.4 449.4 0 00159 0l2.7-.5a32.05 32.05 0 0025.8-25.7l15.7-85a350 350 0 0099.7-57.6l81.3 28.9a32 32 0 0035.1-9.5l1.8-2.1c34.8-41.1 61.6-87.5 79.7-137.9l.9-2.6c4.5-12.3.8-26.3-9.3-35zM788.3 465.9c2.5 15.1 3.8 30.6 3.8 46.1s-1.3 31-3.8 46.1l-6.6 40.1 74.7 63.9a370.03 370.03 0 01-42.6 73.6L721 702.8l-31.4 25.8c-23.9 19.6-50.5 35-79.3 45.8l-38.1 14.3-17.9 97a377.5 377.5 0 01-85 0l-17.9-97.2-37.8-14.5c-28.5-10.8-55-26.2-78.7-45.7l-31.4-25.9-93.4 33.2c-17-22.9-31.2-47.6-42.6-73.6l75.5-64.5-6.5-40c-2.4-14.9-3.7-30.3-3.7-45.5 0-15.3 1.2-30.6 3.7-45.5l6.5-40-75.5-64.5c11.3-26.1 25.6-50.7 42.6-73.6l93.4 33.2 31.4-25.9c23.7-19.5 50.2-34.9 78.7-45.7l37.9-14.3 17.9-97.2c28.1-3.2 56.8-3.2 85 0l17.9 97 38.1 14.3c28.7 10.8 55.4 26.2 79.3 45.8l31.4 25.8 92.8-32.9c17 22.9 31.2 47.6 42.6 73.6L781.8 426l6.5 39.9zM512 326c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm79.2 255.2A111.6 111.6 0 01512 614c-29.9 0-58-11.7-79.2-32.8A111.6 111.6 0 01400 502c0-29.9 11.7-58 32.8-79.2C454 401.6 482.1 390 512 390c29.9 0 58 11.6 79.2 32.8A111.6 111.6 0 01624 502c0 29.9-11.7 58-32.8 79.2z\" } }] }, \"name\": \"setting\", \"theme\": \"outlined\" };\nexport default SettingOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SettingOutlinedSvg from \"@ant-design/icons-svg/es/asn/SettingOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar SettingOutlined = function SettingOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: SettingOutlinedSvg\n  }));\n};\n\nSettingOutlined.displayName = 'SettingOutlined';\nexport default /*#__PURE__*/React.forwardRef(SettingOutlined);","import { IMetadataItem } from \"@src/interfaces/metadata\";\nimport { ITemplate, ITemplateColumn } from \"@src/interfaces/template\";\nimport { TreeNodeProps } from \"antd\";\nimport { makeAutoObservable } from \"mobx\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst _ = {\n  set: require(\"lodash/set\"),\n};\n\nexport enum TempalteLayout {\n  Vertical = \"vertical\",\n  Horizontal = \"horizontal\",\n}\n\nexport class Template {\n  public id?: string;\n  public layout?: string = TempalteLayout.Vertical;\n\n  public master: TemplateSection[] = [];\n  // 每个子表只有一个section，因为子表就是已table的形式展示，所以没法分为多个表\n  public childTables: TemplateSection[] = [];\n\n  private _currentSectionId: string;\n\n  public  currentSectionId: string;\n\n  get currentSection(): TemplateSection {\n    if (!this.currentSectionId) {\n      return null;\n    }\n\n    let section = this.master.find(\n      (section) => section.id === this.currentSectionId\n    );\n    if (section) {\n      return section;\n    }\n\n    return this.childTables.find(\n      (section) => section.id === this.currentSectionId\n    );\n  }\n\n  // 返回当前section的所有字段path\n  get currentSectionPaths(): string[] {\n    const section = this.currentSection;\n    if (!section) {\n      return [];\n    }\n\n    // 1: 如果是主表则返回主表的的所有section的path\n    if (this.master.some((item) => item.id === section.id)) {\n      return this.master\n        .map((section) => section.columns.map((col) => col.path))\n        .flat(Infinity) as string[];\n    }\n    // 2: 如果是子表，则返回匹配的子表的数据\n    const child = this.childTables.find((table) => table.id === section.id);\n    return child.columns.map((col) => col.path);\n  }\n\n  constructor(public entityName: string) {\n    makeAutoObservable(this);\n    this.init();\n  }\n\n  private init() {\n    // 默认有一个主表section\n    const masterSection = new TemplateSection({});\n    masterSection.title = \"基本信息\";\n    this.master.push(masterSection);\n  }\n\n  public setMaster(data: TemplateSection[]) {\n    this.master = data.map((item) => new TemplateSection(item));\n  }\n\n  public setChildTables(data: TemplateSection[]) {\n    this.childTables = data.map((item) => new TemplateSection(item));\n  }\n\n  public appendMasterSection() {\n    const section = new TemplateSection({});\n    this.master.push(section);\n  }\n\n  // 删除分区\n  public removeMasterSection(id: string) {\n    this.master = this.master.filter((item) => item.id !== id);\n    if (this.currentSectionId === id) {\n      this.currentSectionId = undefined;\n    }\n    // 没有任何分区，添加一个默认分区\n    if (!this.master.length) {\n      this.init();\n    }\n  }\n\n  public appendChildSection(data: {title: string;\n    entityName: string;\n    path: string;}) {\n    if (this.childTables.some(section => section.path === data.path)) {\n      return;\n    }\n    const section = new TemplateSection({});\n    section.path = data.path;\n    section.title = data.title;\n    this.childTables.push(section);\n  }\n\n  public removeFieldFormSection(path: string) {\n    const sections = [...this.master, ...this.childTables];\n    sections.forEach(section => {\n      section.removeTemplateColumn(path);\n    })\n  }\n}\n\nexport class TemplateSection {\n  public id: string = uuidv4();\n\n  public title: string;\n\n  public entityName: string; // section对应的entityName\n\n  public path?: string; // 明细表关联主表的字段\n\n  public columns: ITemplateColumn[] = [];\n\n  public getField(path: string): ITemplateColumn {\n    return this.columns.find((col) => col.path === path);\n  }\n\n  public getColumns() {\n    return this.columns;\n  }\n\n  public setColumns(data: ITemplateColumn[]) {\n    this.columns = data;\n  }\n\n  constructor({\n    columns = [],\n    title,\n    path,\n  }: {\n    columns?: ITemplateColumn[];\n    title?: string;\n    path?: string;\n  }) {\n    this.columns = columns;\n    this.title = title;\n    this.path = path;\n\n    makeAutoObservable(this);\n  }\n\n  public pathExist(path: string) {\n    return this.columns.some((col) => col.path === path);\n  }\n\n  //  通过AsyncTree添加新的item数据\n  public addColumnFormMetadata(item: IMetadataItem) {\n    const column: ITemplateColumn = {\n      ...item,\n      colSpan: 1,\n    };\n    this.columns.push(column);\n  }\n\n  // 更新item的数据\n  public updateTemplateColumn(\n    path: string,\n    key: string,\n    value: string | number | boolean\n  ) {\n    const index = this.columns.findIndex((column) => column.path === path);\n    if (index > -1) {\n      this.columns[index] = {\n        ...this.columns[index],\n        [key]: value,\n      };\n    }\n  }\n\n  // 删除item\n  public removeTemplateColumn(path: string) {\n    if (this.columns.some((column) => column.path === path)) {\n      this.columns = this.columns.filter((column) => column.path !== path);\n    }\n  }\n\n  public updateColumns = (columns: ITemplateColumn[]) => {\n    this.columns = columns;\n  };\n}\n\nexport class TemplateUtils {\n  static createObservableTemplate(entityName: string): Template {\n    return new Template(entityName);\n  }\n\n  static wrapperTemplate(data: Template) {\n    const template = new Template(data.entityName);\n    template.id = data.id;\n    if (Array.isArray(data.master) && data.master.length) {\n      template.setMaster(data.master);\n      template.setChildTables(data.childTables);\n    }\n\n    template.layout = data.layout;\n\n    return template;\n  }\n}\n","import React, { useCallback, useRef } from \"react\";\nimport { Col, Form } from \"antd\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ITemplateColumn } from \"@src/interfaces/template\";\nimport cx from 'classnames';\nimport {\n  SettingOutlined,\n} from '@ant-design/icons'\nimport styles from './style.module.scss';\nimport { FieldConsumer } from \"@src/pages/devtool/bizForm/form/TemplateForm/provider\";\nimport { observer } from \"mobx-react\";\n\nconst FormItem = Form.Item;\n\nconst type = \"card\";\nexport interface IDragFormItem {\n  index: number;\n  className?: string;\n  moveItem: (dragIndex: number, dropIndex: number) => void;\n  column: ITemplateColumn;\n  children: React.ReactNode;\n}\n\nexport const DragFormItem = observer(({\n  index,\n  className,\n  children,\n  moveItem,\n  column,\n  ...restProps\n}: IDragFormItem) => {\n  const ref = useRef(null);\n\n  // 放下时的hooks\n  const [{ isOver, dropClassName, handlerId }, drop] = useDrop({\n    accept: type,\n    collect: (monitor) => {\n      const { index: dragIndex } = monitor.getItem() || ({} as any);\n      if (dragIndex === index) {\n        return {};\n      }\n      return {\n        isOver: monitor.isOver(),\n        dropClassName: `${styles['drop-over']}`,\n        handlerId: monitor.getHandlerId(),\n      };\n    },\n    hover(item, monitor) {\n      console.log(item);\n    },\n    drop: (item: any) => {\n      moveItem(item.index, index);\n    },\n  });\n  // 拖拽时的hooks\n  const [{ isDragging }, drag] = useDrag({\n    type,\n    item: { index },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const opacity = isDragging ? 0 : 1;\n\n  drag(drop(ref));\n\n\n  return (\n    <FieldConsumer>\n      {\n        ({ onClick, selectedFieldPath }) => <Col\n          span={(column.colSpan || 1 ) * 6}\n          ref={ref}\n          className={cx(styles['column'], { [dropClassName]: isOver })}\n          onClick={(e: any) => { onClick(column.path) }}>\n          <FormItem\n            label={column.displayName}\n            style={{ cursor: \"move\", opacity, }}\n            required={column.required}\n            {...restProps}\n          >\n            {children}\n          </FormItem>\n          <div className={styles[\"cloumn-setting\"]}>\n            <SettingOutlined />\n          </div>\n        </Col>\n      }\n    </FieldConsumer>\n\n  );\n});","import { matchComponent } from '@src/bizForm/components';\nimport { FormMode } from '@src/bizForm/formMode';\nimport BizSection from '@src/components/BizSection';\nimport { DragFormItem } from '@src/components/DragForm';\nimport { Template, TemplateSection } from '@src/pages/devtool/bizForm/form/template';\nimport { Input, Row, Tooltip } from 'antd';\nimport * as React from 'react';\nimport update from 'immutability-helper';\nimport cx from 'classnames';\nimport style from './style.module.scss';\nimport { observer } from 'mobx-react';\nimport { DeleteOutlined, PlusSquareOutlined } from '@ant-design/icons';\n\n// import style from './style.module.scss';\n\ninterface ISection {\n    template: Template;\n    section: TemplateSection\n    // moveItem: (dragIndex: number, hoverIndex: number) => void;\n}\n\n@observer\nexport default class Section extends React.Component<ISection> {\n\n    moveItem = (dragIndex: number, hoverIndex: number) => {\n        const { template } = this.props;\n        const dragRow = template.currentSection?.columns[dragIndex];\n        template.currentSection.updateColumns(\n            update(template.currentSection?.columns, {\n                $splice: [\n                    [dragIndex, 1],\n                    [hoverIndex, 0, dragRow],\n                ],\n            })\n        );\n    };\n\n    handleSectionClick = () => {\n        const { template, section } = this.props;\n        template.currentSectionId = section.id;\n    }\n\n    handleTitleChange = (e: any) => {\n        const { section } = this.props;\n        section.title = e.target.value;\n    }\n\n    handAddSection = () => {\n        const { template } = this.props;\n        template.appendMasterSection();\n    }\n\n    // handleAddChildSection = (path: string) => { \n    //     const { template } = this.props;\n    //     template.appendChildSection(path);\n    // }\n\n    render() {\n        const { template, section } = this.props;\n        return <div\n            onMouseDown={this.handleSectionClick}\n            className={cx(style['template-section'], { [style['template-section_selected']]: template.currentSectionId && section.id === template.currentSectionId })}>\n            <BizSection\n                leftElement={<Input placeholder=\"未命名\" value={section.title} onChange={this.handleTitleChange} />}\n                rightElement={<span className={style['template-section_actions']}>\n                    <DeleteOutlined onClick={() => template.removeMasterSection(section.id)} />\n                    <Tooltip placement=\"top\" title=\"添加分区\">\n                        <PlusSquareOutlined onClick={this.handAddSection} />\n                    </Tooltip>\n                </span>}\n                content={\n                    <Row gutter={12}>\n                        {section.columns.map((col, index) => (\n                            <DragFormItem\n                                key={col.path}\n                                index={index}\n                                moveItem={this.moveItem}\n                                column={col}\n                            >\n                                {matchComponent(this.componentPropsWrapper(col) as any)}\n                            </DragFormItem>\n                        ))}\n                    </Row>\n                }\n            />\n        </div>\n    }\n\n    componentPropsWrapper = (col: any) => {\n        return {\n            field: {\n                disabled: col.readonly,\n            },\n            model: col,\n            mode: FormMode.Create,\n        }\n    }\n}\n","import { matchComponent } from \"@src/bizForm/components\";\nimport { FormMode } from \"@src/bizForm/formMode\";\nimport { DragFormItem } from \"@src/components/DragForm\";\nimport { ITemplate, ITemplateColumn } from \"@src/interfaces/template\";\nimport { Col, Form, Layout, Row, Tree } from \"antd\";\nimport { template } from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { Template } from \"../../template\";\n\nimport styles from \"./style.module.scss\";\nimport { FieldConsumer } from \"../provider\";\nimport Section from \"./Section\";\n\nconst FormItem = Form.Item;\ninterface ITemplateFormContent {\n  template: Template;\n}\n\n@observer\nexport class TemplateFormContent extends React.Component<ITemplateFormContent> {\n  constructor(props: ITemplateFormContent) {\n    super(props);\n  }\n\n  render() {\n    const { template, template: { master = [], childTables = [] } = {} } = this.props;\n\n    return (\n      template\n      ? <DndProvider backend={HTML5Backend}>\n        <Form layout=\"vertical\" className={styles[\"container\"]}>\n          {\n            master.map(section => <Section key={section.id} template={template} section={section} ></Section>)\n          }\n{\n            childTables.map(section => <Section key={section.id} template={template} section={section} ></Section>)\n          }\n        </Form>\n      </DndProvider>\n      : null\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Observer, observer } from \"mobx-react\";\nimport { Button, Layout } from \"antd\";\nimport { Sider } from \"./Sider\";\nimport { Metadata } from \"../metadata\";\nimport { Template, TemplateUtils } from \"../template\";\nimport { computed, makeAutoObservable, observable, reaction } from \"mobx\";\nimport { TemplateFormContent } from \"./Content\";\n\nimport styles from \"./style.module.scss\";\nimport { Modals } from \"@src/components/Modals\";\nimport { FieldsModal } from \"./FieldsModal\";\nimport { FieldProvider } from \"./provider\";\ninterface ITemplateForm {\n  entityName: string;\n  metadata: Metadata;\n  template: Template;\n}\n\n@observer\nexport class TemplateForm extends React.Component<ITemplateForm, any> {\n\n  @observable\n  private selectedFieldPath: string;\n\n  @computed\n  get selectedKeys() {\n    return this.template.currentSectionPaths;\n  }\n\n  @computed\n  get template(): Template {\n    return this.props.template;\n  }\n\n  @computed\n  get metadata() {\n    return this.props.metadata;\n  }\n\n  get fieldProviderValue() {\n    return {\n      selectedFieldPath: this.state.selectedFieldPath,\n      onClick: (path: string) => {\n        // this.selectedFieldPath = path;\n        this.setState({\n          selectedFieldPath: path,\n        })\n      }\n    }\n  }\n\n  constructor(props: ITemplateForm) {\n    super(props);\n    this.state = {\n      selectedFieldPath: ''\n    }\n  }\n\n  handleAppendFields = () => {\n    Modals.show(FieldsModal, {\n      metadata: this.metadata,\n      template: this.template,\n      entityName: this.props.entityName,\n    })\n  };\n\n  render() {\n    const { entityName } = this.props;\n\n    if (!this.template) {\n      return null;\n    }\n\n    return (\n      <FieldProvider value={this.fieldProviderValue}>\n      <Layout className={styles[\"container\"]}>\n        <Layout.Content className={styles[\"content\"]}>\n          <TemplateFormContent template={this.template} />\n        </Layout.Content>\n        <Layout.Sider theme=\"light\" className={styles[\"sider\"]}>\n          <Sider entityName={entityName} template={this.template} metadata={this.metadata}/>\n        </Layout.Sider>\n      </Layout>\n      </FieldProvider>\n    );\n  }\n}\n","import { IMetadataItem } from \"@src/interfaces/metadata\";\nimport { metadata } from \"@src/metadata/metadata\";\nimport { Button, Checkbox, Input } from \"antd\";\n\ninterface ICols {\n  entityName: string;\n  onChange: (path: string, key: string, value: string | number | boolean) => void;\n  handleRemove: (path: string) => void;\n  // requiredDisabledFunc: () => boolean;\n  // readonlyDisabledFunc: () => boolean;\n}\nexport default ({ onChange, handleRemove, entityName}: ICols) => {\n  const entity = metadata.getEntity(entityName);\n  const disabledFunc = (item: IMetadataItem) => {\n    const field = entity.getField(item.path);\n    if (field) {\n      return field.isSystemField;\n    }\n     // entity.getField没返回值说明就是携带字段\n    return true;\n  }\n  return [\n    {\n      dataIndex: \"index\",\n      title: \"序号\",\n      render: (_val: string, _item: IMetadataItem, index: number) => <span>{index + 1}</span>,\n      width: 40,\n    },\n    {\n      dataIndex: \"displayName\",\n      title: \"名称\",\n      render: (val: string, item: IMetadataItem) => <Input size=\"small\" value={val} onChange={(e) => onChange(item.path, 'displayName', e.target.value)} />\n    },\n    {\n      dataIndex: \"path\",\n      title: \"路径\",\n      width: 200,\n    },\n    {\n      dataIndex: \"required\",\n      title: \"是否必填\",\n      render: (val: boolean, item: IMetadataItem) => <Checkbox checked={val} onChange={(e) => onChange(item.path, 'required', e.target.checked)} disabled={disabledFunc(item)}/>\n    },\n    {\n      dataIndex: \"readonly\",\n      title: \"是否只读\",\n      render: (val: boolean, item: IMetadataItem) => <Checkbox checked={val} onChange={(e) => onChange(item.path, 'readonly', e.target.checked)} disabled={disabledFunc(item)}/>\n    },\n    {\n      dataIndex: \"alwaysHide\",\n      title: \"是否隐藏\",\n      render: (val: boolean, item: IMetadataItem) => <Checkbox checked={val} onChange={(e) => onChange(item.path, 'alwaysHide', e.target.checked)} />\n    },\n    {\n      dataIndex: \"actions\",\n      title: \"操作\",\n      render: (_: any, record: IMetadataItem) => {\n        return <div>\n          <Button type=\"link\" size=\"small\" onClick={() => handleRemove(record.path)}>删除</Button>\n        </div>\n      }\n    }\n  ];\n};\n","import { Button, Layout, message, Spin, Table, TreeNodeProps } from \"antd\";\nimport * as React from \"react\";\nimport colsConfig from \"@src/pages/devtool/bizForm/form/config/cols\";\nimport { IMetadata, IMetadataItem } from \"@src/interfaces/metadata\";\nimport { Metadata, MetaDataUtils } from \"../metadata\";\nimport { SortTable } from \"@src/components/SortTable\";\nimport styles from \"./style.module.scss\";\nimport { FormMode } from \"@src/bizForm/formMode\";\nimport { Observer, observer } from \"mobx-react\";\nimport { AsyncTree } from \"../../components/AsyncTree\";\nimport { computed } from \"mobx\";\nimport { Template } from \"../template\";\n\ninterface IMetaDataForm {\n  entityName: string;\n  metadata: Metadata;\n  template: Template;\n}\n\n@observer\nexport default class MetadataForm extends React.Component<IMetaDataForm> {\n  @computed\n  get checkedKeys() {\n    return this.props.metadata.items.map((item) => item.path);\n  }\n\n  constructor(props: IMetaDataForm) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  /**\n   * metadata上的bool修改为true时，tempalte上的数据应该同步更新为true\n   * 但是在交互上可能反复多次取消选中，所以暂时不做处理\n   * @param path\n   * @param key\n   * @param value\n   */\n  handleItemChange = (path: string, key: string, value: any) => {\n    this.props.metadata.updateMetaDataItem(path, key, value);\n  };\n\n  handleOnCheck = (node: TreeNodeProps) => {\n    const { metadata, template } = this.props;\n    const key = node.key as string;\n    if (metadata.pathExist(key)) {\n      metadata.removeMetaDataItem(key);\n      // 刪除metadata的数据将同步删除template上的额数据\n      if (template.currentSection?.pathExist(key)) {\n        template.currentSection?.removeTemplateColumn(key);\n      }\n    } else {\n      metadata.addItemFormMetadata(node);\n    }\n  };\n\n  handleOnSort = (items: IMetadataItem[]) => {\n    this.props.metadata.setItems(items);\n  };\n\n  // 删除item\n  handleRemove = (path: string) => {\n    const { metadata, template } = this.props;\n    metadata.removeMetaDataItem(path);\n    template.removeFieldFormSection(path);\n  };\n\n  getSortTableProps = () => {\n    return {\n      onChange: this.handleItemChange,\n      handleRemove: this.handleRemove,\n      entityName: this.props.entityName,\n    };\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Layout.Content>\n          <SortTable\n            bordered\n            size=\"small\"\n            rowKey=\"path\"\n            pagination={false}\n            dataSource={[...this.props.metadata.items]}\n            columns={colsConfig(this.getSortTableProps()) as any}\n            onSort={this.handleOnSort}\n          />\n        </Layout.Content>\n        <Layout.Sider style={{ width: \"400px\" }} theme=\"light\">\n          <AsyncTree\n            checkedKeys={this.checkedKeys}\n            entityName={this.props.entityName}\n            onCheck={this.handleOnCheck}\n          ></AsyncTree>\n        </Layout.Sider>\n      </Layout>\n    );\n  }\n}\n","import { Button, Layout, message, Spin, Table, TreeNodeProps } from \"antd\";\nimport * as React from \"react\";\nimport { createMetadata, createTemplate, fetchMetadata, fetchTemplate, updateMetadata, updateTemplate } from \"@src/http\";\nimport { IMetadataItem } from \"@src/interfaces/metadata\";\nimport { Metadata, MetaDataUtils } from \"./metadata\";\nimport { FormMode } from \"@src/bizForm/formMode\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Tabs } from \"antd\";\nimport { TemplateForm } from \"./TemplateForm\";\nimport MetadataForm from \"./MetadataForm\";\nimport { observer } from \"mobx-react\";\nimport styles from \"./style.module.scss\";\nimport { Template, TemplateUtils } from \"./template\";\n\nconst { TabPane } = Tabs;\ninterface IRouteParams {\n  mode: string;\n  entityName: string;\n}\ninterface IMetaDataForm extends RouteComponentProps<IRouteParams> { }\n\n@observer\nexport default class TemplateContainer extends React.Component<\nIMetaDataForm,\nany\n> {\n  private entityName: string;\n\n  private metadata: Metadata = undefined;\n\n  private template: Template = undefined;\n\n  private mode: FormMode;\n\n  // @computed getLength() {\n  //   console.log(this.metadata.items.length);\n  //   return this.metadata.items.length;\n  // }\n\n  constructor(props: IMetaDataForm) {\n    super(props);\n    const {\n      match: { params },\n    } = props;\n\n    this.state = {\n      loading: true,\n      activeKey: \"metadata\",\n      tabs: [\n        {\n          key: \"metadata\",\n          title: \"元数据\",\n          Component: MetadataForm,\n        },\n        {\n          key: \"template\",\n          title: \"模板\",\n          Component: TemplateForm,\n        },\n      ],\n    };\n\n    this.entityName = params.entityName as FormMode;\n    this.mode = params.mode as FormMode || FormMode.Create;\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  init = async () => {\n    try {\n      // metadata所有的template公用同一个，所以template为创建模式时，metadata可能已经存在了\n      await this.getMetadata();\n      await this.getTemplate();\n    } catch (err) {\n      message.error(\"初始化失败\");\n    } finally {\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  getMetadata = async () => {\n    const metadata = await fetchMetadata(this.entityName)\n    if (metadata) {\n      this.metadata = MetaDataUtils.wrapperMetadata(metadata as unknown as Metadata);\n      return;\n    }\n    this.metadata = MetaDataUtils.createObservableMetadata(this.entityName);\n  }\n\n  getTemplate = async () => {\n    if (this.mode === FormMode.Create) {\n      this.template = TemplateUtils.createObservableTemplate(this.entityName);\n    } else if (this.mode === FormMode.Edit) {\n      const result = await fetchTemplate(this.entityName)\n      if (!result) {\n        message.error(\"模板不存在\");\n        return;\n      }\n      this.template = TemplateUtils.wrapperTemplate(result as unknown as Template);\n    }\n  }\n\n  handleItemChange = (path: string, key: string, value: any) => {\n    this.metadata.updateMetaDataItem(path, key, value);\n  };\n\n  handleOnCheck = (node: TreeNodeProps) => {\n    this.metadata.addItemFormMetadata(node);\n    this.forceUpdate();\n  };\n\n  handleOnSort = (items: IMetadataItem[]) => {\n    this.metadata.setItems(items);\n    this.forceUpdate();\n  };\n\n  handleSave = async() => {\n    try {\n      if (this.metadata.id) {\n        await updateMetadata(this.metadata);\n      } else {\n        await createMetadata(this.metadata);\n      }\n      if (this.template.id) {\n        await updateTemplate(this.template);\n      } else {\n        await createTemplate(this.template);\n      }\n      message.success(\"保存成功\");\n    } catch(err) {\n      console.error(err);\n      message.error(\"保存失败\");\n    }\n  };\n\n  handleTabChange = (activeKey: string) => {\n    this.setState({\n      activeKey,\n    });\n  };\n\n  tabsRender = () => {\n    const { tabs = [], activeKey } = this.state;\n    return (\n      <Tabs activeKey={activeKey} onChange={this.handleTabChange}>\n        {tabs.map(({ title, key, Component }: any) => {\n          return <TabPane tab={title} key={key}>\n            <Component\n              entityName={this.entityName}\n              metadata={this.metadata}\n              template={this.template}\n            />\n          </TabPane>\n        })}\n      </Tabs>\n    );\n  };\n\n  render() {\n    if (!this.metadata) {\n      return null;\n    }\n    return (\n      <Spin className={styles[\"template-container\"]} spinning={!this.metadata}>\n        {this.tabsRender()}\n        <div className={styles[\"template-footer\"]}>\n          <Button type=\"primary\" onClick={this.handleSave}>\n            保存\n          </Button>\n        </div>\n      </Spin>\n    );\n  }\n}"],"sourceRoot":""}