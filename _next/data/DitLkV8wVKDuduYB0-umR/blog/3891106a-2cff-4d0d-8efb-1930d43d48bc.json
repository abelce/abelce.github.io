{"pageProps":{"data":{"category":{"id":"de603bf9-e2dd-4eb4-aee0-c48d86eea130","name":"css"},"content":"\n> 本文主要是结合自己在学习中使用css来实现图片的宽高自适应，并给出相应的结局方案。\n\n### 场景\n\n给定一系列图片，图片宽高不等，每行所展示的图片数量不等，如何实现图片的自适应。\n\n\n\n### 实现方法\n\n聪明的你肯定会想到使用**flex**布局，并且设置**flex-wrap: wrap**。但如何做到自适应宽度呢：\n\n我们假设图片原始宽度、高度分别为**width**、**height**，首先如果没有设置任何样式，那么图片高度肯定是不一样。于是设置一个参考高度200px，这样宽度就会有剩余，那么剩下的宽度如何撑满呢，使用**flex-grow:  width * 200 / height**分别放大对应的图片（图片的放大倍数其实每张图片的宽度）。\n\n下面看一张实现后的效果:\n\n![](https://file.vwood.xyz/2022/07/11/upload_75zn1z2qlono9nx0roltdnigzszfcu39.jpeg)\n\n\n\n#### 代码（React）\n\n```javascript\n// list.jsx\nclass List extends React.Component {\n  render() {\n    return (\n      <div className={style.list}>\n        {\n          this.props.images.map((img, index) => <Item key={img.id} image={img}/>)\n        }\n      </div>\n    )\n  }\n}\n\n// item.jsx\n// 图片的参考高度设置为200px,\nclass Item extends React.Component {\n    // xxxxxx\n  render() {\n    const {\n      attributes: { url, width, height },\n    } = this.props.image;\n\n    return (\n      <div\n        className={style.imageContainer}\n        style={{\n          width: `${(width * 200) / height}px`,\n          flexGrow: (width * 200) / height,\n        }}>\n        <img\n          src={url}\n        />\n        <div\n          className=\"placeholder\"\n          style={{\n            paddingBottom: `${(height / width) * 100}%`,\n            display: loaded ? 'none' : 'block',\n          }}\n        />\n      </div>\n    );\n  }\n}\n\n```\n\n样式(scss)\n\n```scss\n.list {\n  display: flex;\n  flex-wrap: wrap;\n  &::after {\n    content: '';\n    flex-grow: 9999999;\n  }\n}\n\n.imageContainer {\n  display: inline-block;\n  margin: 4px;  \n}\n```\n\n\n\n##### **PS**\n\n上面解决了图片自适应问题，但是如果最后一行只有一张图片（或图片数量很少），最后一行的图片可能会很高，这时就可以找一个元素把剩余的空间撑起来，这样就相当于不让最后一张图片缩放或缩放的比例很小（高度维持在200px左右），使用伪元素**after**，并设置一个很大的**flex-grow**值。\n\n\n","createTime":1636124890100,"creativeType":"original","description":"\n本文主要是结合自己在学习中使用css来实现图片的宽高自适应，并给出相应的结局方案。\n\n 场景\n\n给定一系列图片，图片宽高不等，每行所展示的图片数量不等，如何实现图片的自适应。\n\n\n\n 实现方法\n\n聪明的你肯定会想到使用flex布局，并且设置flex-wrap: wrap。但如何做到自适应宽度呢：\n\n我们假设图片原始宽度、高度分别为width、heigh","headerImg":"//file.vwood.xyz/2022/07/11/upload_93g868jys6jvws4mixi2olc40hexurf4.jpg","id":"3891106a-2cff-4d0d-8efb-1930d43d48bc","isDeleted":false,"likeCount":0,"name":"如何使用css实现图片宽高自适应","operator":{"avatar":"//file.vwood.xyz/2022/07/13/upload_xtola9p0z8ctzyg5g014tfmjkokb7ydq.jpg","description":"一个懒惰、躺平的程序员","github":"https://github.com/abelce","id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063691299,"viewCount":203},"id":"3891106a-2cff-4d0d-8efb-1930d43d48bc","latestArticleList":[{"id":"466b23fe-2f73-44b1-9e97-fe552c793e80","name":"css outline","tags":[],"description":"","content":""},{"id":"854b82f8-111d-4ffd-99a0-0eb3b7c21b41","name":"Unrecognized extension value in extension set ([object Object]). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks","tags":[],"description":"","content":""},{"id":"b7779b61-7791-41bc-b345-a81aaaad6bb5","name":"golang编译错误","tags":[],"description":"","content":""},{"id":"8afabe21-5c71-49e7-ae66-0becb36179c4","name":"webpack 打包时修改源码","tags":[],"description":"","content":""},{"id":"e1d7c155-b368-4258-95e9-f99eee92bad5","name":"react svg 导入错误","tags":[],"description":"","content":""}]},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}