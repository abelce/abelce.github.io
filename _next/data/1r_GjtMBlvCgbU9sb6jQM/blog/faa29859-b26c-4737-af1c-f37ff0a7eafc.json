{"pageProps":{"data":{"category":{"id":"ed4bc25c-967e-4a17-b713-8a03eb4acbb5","name":"设计模式"},"content":"\n> 最近在做SDK的时候，对模块进行解藕，模块之间的依赖关系就需要进行处理，使用到了依赖注入，所以记录一下。\n\n## 一、 什么是依赖注入\n依赖注入就是**基于调用方它所需要的事物**。\n\n有两个模块Car、Enginer, Car依赖Enginer，实现方式可以如下，\n方案一：\n    \n\n```js\n// Enginer\nclass Enginer {\n\n}\n// Car\nclass Car {\n    constructor () {\n        this.enginer = new Enginer();   \n    }\n}\n```\n\n上面的方式是在依赖的内部实例化被依赖项，就是说汽车和发动机是紧密的结合在一起，如果要造两辆不同的车，仅仅只是发动机不一同，那么也需要重新设计一个Car类。\n是不是可以将发动机从外部传入，这样就可以复用上面的Car类了，新的方案如下：\n方案二：\n    \n```js\n// Enginer\nclass Enginer {\n\n}\n// Car\nclass Car {\n    constructor (enginer) {\n        this.enginer = enginer;   \n    }\n}\n```\n    \n方案二就是依赖注入，将依赖的类作为参数传递给调用方就成为依赖注入。\n\n## 二、总结\n很多模块解藕的过程都会使用到依赖注入，可以方便代码的横向扩展，通体提高代码的可读性、可维护性。\n[依赖注入示例](https://github.com/abelce/blogs/tree/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/code)\n\n","createTime":1698558984850,"creativeType":"original","description":"\n最近在做SDK的时候，对模块进行解藕，模块之间的依赖关系就需要进行处理，使用到了依赖注入，所以记录一下。\n\n 一、 什么是依赖注入\n依赖注入就是基于调用方它所需要的事物。\n\n有两个模块Car、Enginer, Car依赖Enginer，实现方式可以如下，\n方案一：\n    \n\njs\n Enginer\nclass Enginer {\n\n}\n Car\nclass Car","headerImg":"","id":"faa29859-b26c-4737-af1c-f37ff0a7eafc","isDeleted":false,"likeCount":0,"name":"依赖注入","operator":{"avatar":"//file.vwood.xyz/2023/06/11/upload_ssaf3w2dlo0xox7alrcrca1704a6j2fn.jpg","description":"","github":"https://github.com/abelce","id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["设计模式","依赖注入"],"updateTime":1698559016247,"viewCount":0},"id":"faa29859-b26c-4737-af1c-f37ff0a7eafc","latestArticleList":[{"id":"6fb6e255-cf4e-46f7-b65a-7ee57793d305","name":"iframe在react中的使用","tags":[],"description":"","content":""},{"id":"faa29859-b26c-4737-af1c-f37ff0a7eafc","name":"依赖注入","tags":[],"description":"","content":""},{"id":"fbd908c6-d6e4-4158-9581-fe08ac759e84","name":"baseState与baseUpdate.md","tags":[],"description":"","content":""},{"id":"8052bec4-7240-4068-864d-243e8b71d918","name":"自己打造的react hooks库: let-hooks","tags":[],"description":"","content":""},{"id":"da751d13-6717-41fd-a556-c311a1e24494","name":"overscroll-behavior阻止容器滚动","tags":[],"description":"","content":""}]},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}