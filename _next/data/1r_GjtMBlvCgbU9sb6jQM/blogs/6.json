{"pageProps":{"current":6,"blogs":[{"content":"","createTime":1648286545073,"creativeType":"original","description":"js\n <a\n   href=\"skype:xxxx?chat\"\n \ttarget=\"_blank\"\n    rel=\"noreferrer\"\n    >\n</a   \n\n更换用户名即可","headerImg":"","id":"dca13c42-ae64-4bc6-b7ab-88bcfd223e53","isDeleted":false,"likeCount":0,"name":"js 打开skype","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063959005,"viewCount":189},{"content":"","createTime":1657873351947,"creativeType":"original","description":"LRU是Least Recently Used的缩写，即最近最少使用，是一种常见的缓存置换算法，淘汰最久未使用的数据。\n\n\n 实现思路\n\n1. 设定缓存的最大数据量maxSize\n\n2. 数据按照最近访问时间进行排序，最近访问的数据放在最后\n\n3. 访问时若数据存在则将数据移动到最后\n\n4. 添加数据时：\n\n   1. 数据存在，则移动到最后\n   2. 不存在，若队列中数据量已到最大值","headerImg":"//file.vwood.xyz/2022/07/15/upload_ejrh8m2zcd0hc0rgf622bffi7v8lqbn5.jpg","id":"38abab46-1f1d-47e0-9f3d-aeafdf41a0e7","isDeleted":false,"likeCount":0,"name":"js 实现 LRU缓存","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["LRU","js"],"updateTime":1658063913819,"viewCount":70},{"content":"","createTime":1653616647381,"creativeType":"original","description":"本文主要介绍自己在使用v2ray进行反向代理过程中。安装请参考官网[安装](https:www.v2ray.com/chapter_00/install.html)，主要实现通过中间服务器访问家里电脑上运行的服务。\n\n\n\n 原理\n\n- 假设在主机 A 中有一个网页服务器，这台主机没有公网 IP，无法在公网上直接访问。另有一台主机 B，它可以由公网访问。现在我们需要把 B 作为入口，把流","headerImg":"","id":"06a15352-9328-4916-9524-7d158dcf4088","isDeleted":false,"likeCount":0,"name":"v2ray反向代理","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["v2ray","代理"],"updateTime":1658063900096,"viewCount":188},{"content":"","createTime":1638107992736,"creativeType":"original","description":"css\n.text1 {\n/*单行*/\n\n  width:200px;\n  overflow:hidden;\n  text-overflow:ellipsis;\n  -o-text-overflow:ellipsis;\n  -webkit-text-overflow:ellipsis;\n  -moz-text-overflow:ellipsis;\n  white-space:nowrap;\n","headerImg":"","id":"a21482f9-6b85-4bdb-b652-19d115b9080d","isDeleted":false,"likeCount":0,"name":"css行数限制","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063885880,"viewCount":197},{"content":"","createTime":1650510288910,"creativeType":"original","description":"\n\n滚动加载数据就是说在达到某个条件的时候自动触发加载数据的动作，通常是滚动到页面底部的时候加载数据；\n\n代码如下：\n\njs\n  handleScroll = (e) ={\n    let layout = document.getElementById(\"layout\");\n\n    if (layout.clientHeight + layout.scrollTop >= layou","headerImg":"","id":"131d0d16-5692-403b-b949-87426c3d3f47","isDeleted":false,"likeCount":0,"name":"js 实现滚动加载数据","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063851344,"viewCount":181},{"content":"","createTime":1636124890100,"creativeType":"original","description":"\n本文主要是结合自己在学习中使用css来实现图片的宽高自适应，并给出相应的结局方案。\n\n 场景\n\n给定一系列图片，图片宽高不等，每行所展示的图片数量不等，如何实现图片的自适应。\n\n\n\n 实现方法\n\n聪明的你肯定会想到使用flex布局，并且设置flex-wrap: wrap。但如何做到自适应宽度呢：\n\n我们假设图片原始宽度、高度分别为width、heigh","headerImg":"//file.vwood.xyz/2022/07/11/upload_93g868jys6jvws4mixi2olc40hexurf4.jpg","id":"3891106a-2cff-4d0d-8efb-1930d43d48bc","isDeleted":false,"likeCount":0,"name":"如何使用css实现图片宽高自适应","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063691299,"viewCount":203},{"content":"","createTime":1652795036062,"creativeType":"original","description":">在画图工具中需要判断两个矩形是否相交\n\n<img src=\"https:file.vwood.xyz/2022/07/11/upload_ec1otndjo2fzjidbl1gncufpba4orxdy.png\" style=\"zoom:40%\">\n\n如上有两个矩形，中心点分别为O1(x1、y1)、O2(x2、y2)，宽高分别为(w1、h1)和(w2、h2)；\n\n要判断两个矩形是否相交，可以","headerImg":"https://static.vwood.xyz/blog/piqsels.com-id-zbivg.jpg","id":"ca307ea2-ce5f-46ea-8fdb-95fad4fd725b","isDeleted":false,"likeCount":0,"name":"判断两个矩形相交","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["矩形","相交"],"updateTime":1658063670222,"viewCount":234},{"content":"","createTime":1638020962954,"creativeType":"original","description":" minio 安装过程\n\n\n\n在使用minio前试过nextcloud，反复折腾后有问题，就转向了minio，minio的安装还是非常顺利\n\n\n\nDocker-compose.yml\n\nyml\n  minio:\n    image: \"minio/minio\"\n    hostname: minio\n    restart: always\n    volumes:\n      - ","headerImg":"//file.vwood.xyz/2022/07/12/upload_br39xic7v40y1d81g94egwtxkbtf43z7.jpg","id":"6691aca2-4e55-4403-a656-bd82eb45a5db","isDeleted":false,"likeCount":0,"name":"minio 安装过程","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063660432,"viewCount":247},{"content":"","createTime":1639749255267,"creativeType":"original","description":"以前看很多博客文章，都用mac的窗口样式把图片或者文章包裹起来，话空闲时间自己也做了一个\n\n效果如下：\n<img src=\"https:file.vwood.xyz/2022/07/11/upload_54eierzmnj1z3vd2got8jxkq2b7onuie.png\" style=\"zoom: 0.5\"/>\n\n安装：\njs\nnpm install -S vwin-eazy-win","headerImg":"//file.vwood.xyz/2022/07/11/upload_vqq9g8km7094zk4h00uexcadvfijwhmz.jpg","id":"e29e4fd7-0d1e-441b-ac98-d5fe674eb865","isDeleted":false,"likeCount":0,"name":"mac窗口的插件vwin-eazy-win","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["mac","窗口"],"updateTime":1658063650584,"viewCount":242},{"content":"","createTime":1653301833072,"creativeType":"original","description":" 介绍\n\nMobx-state-tree（简称MST）是基于mobx的响应式状态管理工具，核心思想就是一个动态树，每个树由一个结构和一个状态组成，支持状态的序列化、反序列化、时间旅行等功能。\n\n 使用\njs\nnpm install mobx mobx-state-tree --save\n\n或\njs\nyarn add mobx mobx-state-tree\n\n\n","headerImg":"//file.vwood.xyz/2022/07/12/upload_xr6ll1e2a1s0dez3htsozhff6rcowu27.jpg","id":"fbf0032a-b12f-422e-b042-e2b2f76bd7d8","isDeleted":false,"likeCount":0,"name":"Mobx-state-tree介绍","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["Mobx-state-tree","MST"],"updateTime":1658063629623,"viewCount":354}],"latestBlogs":[{"id":"6fb6e255-cf4e-46f7-b65a-7ee57793d305","name":"iframe在react中的使用","tags":[],"description":"","content":""},{"id":"faa29859-b26c-4737-af1c-f37ff0a7eafc","name":"依赖注入","tags":[],"description":"","content":""},{"id":"fbd908c6-d6e4-4158-9581-fe08ac759e84","name":"baseState与baseUpdate.md","tags":[],"description":"","content":""},{"id":"8052bec4-7240-4068-864d-243e8b71d918","name":"自己打造的react hooks库: let-hooks","tags":[],"description":"","content":""},{"id":"da751d13-6717-41fd-a556-c311a1e24494","name":"overscroll-behavior阻止容器滚动","tags":[],"description":"","content":""},{"id":"f9b88b86-08c8-46d7-9398-35520cae75e9","name":"overflow:clip和overflow-clip-margin的介绍","tags":[],"description":"","content":""},{"id":"28e7fc5d-ef66-4eed-858c-b2d600c1c5de","name":"display:contents","tags":[],"description":"","content":""},{"id":"8adc7054-20dc-4f73-bcea-f7365f91ed7c","name":"docker pull 慢","tags":[],"description":"","content":""},{"id":"705e62c8-4c77-47af-bee2-2cb4eabb7948","name":"jotai原理篇","tags":[],"description":"","content":""},{"id":"c3ba9cf2-9005-4911-8130-417f69c93161","name":"ssh: connect to host github.com port 22: Operation timed out","tags":[],"description":"","content":""}],"total":97},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}