{"pageProps":{"current":3,"blogs":[{"content":"","createTime":1636124983377,"creativeType":"translate","description":"Resize Observer是一个新的JavaScript API，与[Intersection Observer API](https:alligator.io/js/intersection-observer/)、[Mutation Observer](https:developer.mozilla.org/en-US/docs/Web/API/M","id":"b91d22df-cec2-4ee0-b23b-89e7e43a3cc1","isDeleted":false,"likeCount":0,"name":"Resize Observer使用","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["Resize Observer"],"updateTime":1658498485974,"viewCount":200},{"content":"","createTime":1650609793416,"creativeType":"original","description":"使用jsonb_set函数\nsql\nUPDATE tbl_article SET data=jsonb_set(data, '{name}', 'value', true);\n\n其中data为jsonb数据格式，更新的字段名为name，值为value","id":"00921fd5-9d20-430d-a5a8-bb2b73110480","isDeleted":false,"likeCount":0,"name":"postgres更新jsonb数据","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["pgsql","jsonb","更新"],"updateTime":1658064060208,"viewCount":210},{"content":"","createTime":1640183965789,"creativeType":"original","description":"经常在脚本编写中需要使用到模版tempalte，用来静态生成文件、代码，总结如下。\n\n template中define使用\n\n在使用编写template时可以使用{{define}}{{end}}来命名模版，在模版引入时直接使用命名即可，如下：\nheader.tpl\n\ntpl\n{{define header}}\n\theader demo\n{{end}}\n\n\narticle.tpl","id":"dc34891b-d0b9-4d3b-8183-aff569cf3269","isDeleted":false,"likeCount":0,"name":"golang tempalte使用","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063991343,"viewCount":326},{"content":"","createTime":1650353584993,"creativeType":"original","description":"M1芯片安装依赖的时候会报错：\n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: wasm code commit Allocation failed - process out of memory\n 1: 0x10431b740 node::Abort() [/Users/xxx/.nvm/versions/node/v14.16.0/bin/node]\n 2","id":"d649dced-2061-462c-b9bb-cae7b8a28873","isDeleted":false,"likeCount":0,"name":"nodejs在M1报错","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063980293,"viewCount":185},{"content":"","createTime":1648286545073,"creativeType":"original","description":"js\n <a\n   href=\"skype:xxxx?chat\"\n \ttarget=\"_blank\"\n    rel=\"noreferrer\"\n    >\n</a   \n\n更换用户名即可","id":"dca13c42-ae64-4bc6-b7ab-88bcfd223e53","isDeleted":false,"likeCount":0,"name":"js 打开skype","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063959005,"viewCount":189},{"content":"","createTime":1657873351947,"creativeType":"original","description":"LRU是Least Recently Used的缩写，即最近最少使用，是一种常见的缓存置换算法，淘汰最久未使用的数据。\n\n\n 实现思路\n\n1. 设定缓存的最大数据量maxSize\n\n2. 数据按照最近访问时间进行排序，最近访问的数据放在最后\n\n3. 访问时若数据存在则将数据移动到最后\n\n4. 添加数据时：\n\n   1. 数据存在，则移动到最后\n   2. 不存在，若队列中数据量已到最大值","id":"38abab46-1f1d-47e0-9f3d-aeafdf41a0e7","isDeleted":false,"likeCount":0,"name":"js 实现 LRU缓存","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["LRU","js"],"updateTime":1658063913819,"viewCount":70},{"content":"","createTime":1653616647381,"creativeType":"original","description":"本文主要介绍自己在使用v2ray进行反向代理过程中。安装请参考官网[安装](https:www.v2ray.com/chapter_00/install.html)，主要实现通过中间服务器访问家里电脑上运行的服务。\n\n\n\n 原理\n\n- 假设在主机 A 中有一个网页服务器，这台主机没有公网 IP，无法在公网上直接访问。另有一台主机 B，它可以由公网访问。现在我们需要把 B 作为入口，把流","id":"06a15352-9328-4916-9524-7d158dcf4088","isDeleted":false,"likeCount":0,"name":"v2ray反向代理","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["v2ray","代理"],"updateTime":1658063900096,"viewCount":188},{"content":"","createTime":1638107992736,"creativeType":"original","description":"css\n.text1 {\n/*单行*/\n\n  width:200px;\n  overflow:hidden;\n  text-overflow:ellipsis;\n  -o-text-overflow:ellipsis;\n  -webkit-text-overflow:ellipsis;\n  -moz-text-overflow:ellipsis;\n  white-space:nowrap;\n","id":"a21482f9-6b85-4bdb-b652-19d115b9080d","isDeleted":false,"likeCount":0,"name":"css行数限制","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063885880,"viewCount":197},{"content":"","createTime":1639380331908,"creativeType":"original","description":"在js中有时需要生成随机数，通常会安装uuid，不是常用的话安装uuid会浪费加载资源，可以使用URL.createObjectURL(new Blob()).substr(-36)。\n\n其中URL.createObjectURL(new Blob())，生成的URL如下，只需取最后的36位随机字符串即可:\n\n![](https:static.vwood.xyz/blog/企业","id":"5afe2577-77e4-4d5d-819a-b6e7f7561d30","isDeleted":false,"likeCount":0,"name":"URL.createObjectURL(new Blob()).substr(-36)生成uuid","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063872460,"viewCount":210},{"content":"","createTime":1650510288910,"creativeType":"original","description":"\n\n滚动加载数据就是说在达到某个条件的时候自动触发加载数据的动作，通常是滚动到页面底部的时候加载数据；\n\n代码如下：\n\njs\n  handleScroll = (e) ={\n    let layout = document.getElementById(\"layout\");\n\n    if (layout.clientHeight + layout.scrollTop >= layou","id":"131d0d16-5692-403b-b949-87426c3d3f47","isDeleted":false,"likeCount":0,"name":"js 实现滚动加载数据","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063851344,"viewCount":181}],"latestBlogs":[{"id":"204fab9b-434c-47fd-83cc-787a142e9309","name":"前端websocket中定时器使用","tags":[],"description":"","content":""},{"id":"28379fc5-a74f-428a-a849-35145a4f7c93","name":"Error: Cannot access contents of url \"\". Extension manifest must request permission to access this host.","tags":[],"description":"","content":""},{"id":"b543b2a1-6acf-4468-b9f4-14c54304c67c","name":"blob:http:// 的理解","tags":[],"description":"","content":""},{"id":"2df18b82-732d-4e55-b0e3-18d0e6a53ed2","name":"upyun nodejs上传文件","tags":[],"description":"","content":""},{"id":"1f8598cd-9fdb-4d7c-b6b7-7cbca6424f20","name":"mac 命令行启动docker","tags":[],"description":"","content":""},{"id":"d142839e-7615-4266-874e-20da660013ed","name":"ECDSA host key for xx.xx.xx.xx has changed and you have requested strict checking. Host key verification failed.","tags":[],"description":"","content":""},{"id":"dd1b2427-b982-453e-9974-343efc09233b","name":"mac docker-compose up 报错","tags":[],"description":"","content":""},{"id":"bce956aa-267f-4f66-98cf-c52eb3f79752","name":"组件库与项目react版本冲突","tags":[],"description":"","content":""},{"id":"03b49f83-d393-4473-aacb-9b4e61651482","name":"error TS2300: Duplicate identifier 'LibraryManagedAttributes'.","tags":[],"description":"","content":""},{"id":"3f166e04-5e23-47c4-a8bb-c9e6c812ba34","name":"关于vwood","tags":[],"description":"","content":""}],"total":68},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{},"commentStore":{},"noteStore":{},"askStore":{},"stypeStore":{}},"__N_SSG":true}