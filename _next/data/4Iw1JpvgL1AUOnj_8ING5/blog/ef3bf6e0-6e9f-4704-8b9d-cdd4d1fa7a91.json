{"pageProps":{"data":{"category":{"id":"b741cc29-290b-44f7-a36b-2604cda6f43c","name":"typescript"},"content":"\ntypescript已经成为前端日常开发中常用的工具之一，本文结合自己的使用做一下笔记，方便以后查阅。\n\n\n## Partial\nPartial可以将某个类型中定义的属性变成可选的.\n下面的定义了`Book`类型，创建实力时如果不设置`id`属性就会提示错误。\n\n```typescript\ntype Book = {\n  id: string;\n  name: string;\n};\n\nconst book1: Book = {\n    id: \"1\",\n    name: \"book1\"\n}\n\n// 提示错误: Property 'id' is missing in type '{ name: string; }' but required in type 'Book'.ts(2741)\nconst book2: Book = {\n    name: \"book2\"\n}\n```\n可以通过`Partial`设置成部分属性\n\n```ts\nconst book2: Partial<Book> = {\n    name: \"book2\"\n}\n```\n\n## is\n`is`用来指定数据的类型。\n\n下面`isNumber`函数用来判断输入为数字，如果是就用调用`setValue`，但是提示`value`的值可能为`undefined`不能赋值给`number`类型。\n\n```ts\nconst isNumber = (taregt: unknown): boolean => typeof taregt === \"number\" && !Number.isNaN(taregt)\n\n  const setValue = (newValue: number) => {\n    // ....\n  };\n\nconst reset = (value?: number) => {\n    if (isNumber(value)) {\n    // 错误提示: Argument of type 'number | undefined' is not assignable to parameter of type 'number'. Type 'undefined' is not assignable to type 'number'.ts(2345)\n      setValue(value);\n    }\n};\n```\n`isNumber`函数已经判断value位数字了，但是编译器还是报错，那怎样才能让编译器认为value就是`nmber`，没错`is`可能达到目的。将`isNumber`的返回类型使用`is`指定为`number`.\n```ts\nconst isNumber = (taregt: unknown): taregt is number => typeof taregt === \"number\" && !Number.isNaN(taregt)\n```\n\n\n\n## infer\n`infer`用来推断数据的类型，typescript可以根据条件来确定类型比如官网的例子:\n\n```ts\ninterface Animal {\n  live(): void;\n}\ninterface Dog extends Animal {\n  woof(): void;\n}\n\ntype Example1 = Dog extends Animal ? number : string;\n// type Example1 = number\n\ntype Example2 = RegExp extends Animal ? number : string;\n// type Example2 = string\n```\n所以可以根据条件动态确定输入的类型\n\n### 推断函数返回类型\n表示如果`T`是一个无参数的函数，则返回`T`函数的返回值，返回返回`T`本身，\n```ts\ntype func = () => number;\ntype GetReturnType<T> = T extends () => infer R ? R : T;\ntype FuncReturnType = GetReturnType<func>; // number\n\ntype Foo = string;\ntype StringReturnType = GetReturnType<Foo>; // string\n```\n可以将上面的`type func = () => number`改成有参数的`type func = (a: string) => number`，可以看返回了`func`函数本身。\n\n### 推断联合类型\n\n```ts\ntype InferType<T> = T extends {name: infer V, age: infer V} ? V : never;\ntype Foo1 = InferType<{name: string; age: string}>;// type Foo1 = string\ntype Foo2 = InferType<{name: string; age: number}>;// type Foo = string | number\n```\n同理可以推断数组的类型\n\n```ts\ntype InferType<T> = T extends (infer R)[] ? R : never;\ntype Foo3 = InferType<[string, number, boolean]>; // type Foo3 = string | number | boolean\n```\n\n## Omit\n忽略对象的某些属性。\n\n下面的代码提示缺少id、time属性。\n```ts\ntype Book = {\n    id: string;\n    name: string;\n    time: number;\n}\n\nconst book1: Book = { // Type '{ name: string; }' is missing the following properties from type 'Book': id, timets(2739)\n    name: \"book1\",\n}\n```\n\n通过`Omit`可以忽略id、time属性，只要name属性。\n```ts\nconst book1: Omit<Book, \"id\" | \"time\"> = {\n    name: \"book1\",\n}\n```\n\n## Exclude \n排除联合类型的某些类型\n\n```ts\ntype Foo = \"a\" | \"b\" | \"c\";\ntype Bar = Exclude<Foo, \"a\">; // type Foo = \"a\" | \"b\" | \"c\";\n```\n\n## Extract\n从联合类型中提取符合条件的成员\n\n下面从Foo中提取`\"a\"`、`\"d\"`，最后`Bar`为`\"a\"`。\n```ts\ntype Foo = \"a\" | \"b\" | \"c\";\ntype Bar = Extract<Foo, \"a\" | \"d\">; // type Bar = \"a\"\n```\n看看官网的例子\n```ts\ntype T1 = Extract<string | number | (() => void), Function>; //type T1 = () => void\n \ntype Shape =\n  | { kind: \"circle\"; radius: number }\n  | { kind: \"square\"; x: number }\n  | { kind: \"triangle\"; x: number; y: number };\n \ntype T2 = Extract<Shape, { kind: \"circle\" }>\n// type T2 = {\n//     kind: \"circle\";\n//     radius: number;\n// }\n```\n\n## NonNullable\n排除联合类型中`undefined`、`null`\n\n下面的例子类型为`string | number`。\n```ts\ntype T = NonNullable<string | number | undefined | null>; //type T = string | number\n```\n\n## Awaited\n通过对异步函数或者Promise的then进行递归的解开来获取类型。\n\n```ts\ntype A = Awaited<Promise<string>>; // type A = string\ntype B = Awaited<Promise<Promise<number>>>; // type B = number\ntype C = Awaited<boolean | Promise<number>>; // type C = number | boolean\n```\n\n## Required\n将类型的所有属性设置为必填。\n\n下面的`Props`的属性都是可选的，但是使用`Required`后就必填了\n```ts\ninterface Props {\n  a?: number;\n  b?: string;\n}\n \nconst obj: Props = { a: 5 };\n \n//error: Property 'b' is missing in type '{ a: number; }' but required in type 'Required<Props>'.ts(2741)\nconst obj2: Required<Props> = { a: 5 };\n```\n\n## Readonly\n将类型的所有属性标记为已读，创建的对象属性不允许再次赋值。\n\n```ts\ninterface Todo {\n  title: string;\n}\n \nconst todo: Readonly<Todo> = {\n  title: \"Delete inactive users\",\n};\n \ntodo.title = \"Hello\"; // Cannot assign to 'title' because it is a read-only property.ts(2540)\n```","createTime":1701269736527,"creativeType":"original","description":"\ntypescript已经成为前端日常开发中常用的工具之一，本文结合自己的使用做一下笔记，方便以后查阅。\n\n\n Partial\nPartial可以将某个类型中定义的属性变成可选的.\n下面的定义了Book类型，创建实力时如果不设置id属性就会提示错误。\n\ntypescript\ntype Book = {\n  id: string;\n  name: string;\n};\n\nconst","headerImg":"","id":"ef3bf6e0-6e9f-4704-8b9d-cdd4d1fa7a91","isDeleted":false,"likeCount":0,"name":"typescript使用","operator":{"avatar":"//file.vwood.xyz/2023/06/11/upload_ssaf3w2dlo0xox7alrcrca1704a6j2fn.jpg","description":"","email":"1061225829@qq.com","github":"https://github.com/abelce","id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorId":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["typescript","Partial","infer"],"updateTime":1701269736527,"viewCount":0},"id":"ef3bf6e0-6e9f-4704-8b9d-cdd4d1fa7a91","latestArticleList":[{"id":"460fb164-5722-4cc2-ad6b-c35d5be4a670","name":"js提取iconfont项目的图标","tags":[],"description":"","content":""},{"id":"0517a4cb-be8a-47a5-b7c2-da7904a4ba67","name":"docker使用postgres","tags":[],"description":"","content":""},{"id":"cd89eea1-6839-499b-8573-5a487afc48ef","name":"babel配置文件加载","tags":[],"description":"","content":""},{"id":"ef3bf6e0-6e9f-4704-8b9d-cdd4d1fa7a91","name":"typescript使用","tags":[],"description":"","content":""},{"id":"7b2f60f3-7b3e-4889-8062-30323d2af5cf","name":"git设置超时设置","tags":[],"description":"","content":""}]},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}