{"pageProps":{"current":3,"blogs":[{"content":"","createTime":1650353584993,"creativeType":"original","description":"M1芯片安装依赖的时候会报错：\n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: wasm code commit Allocation failed - process out of memory\n 1: 0x10431b740 node::Abort() [/Users/xxx/.nvm/versions/node/v14.16.0/bin/node]\n 2","headerImg":"","id":"d649dced-2061-462c-b9bb-cae7b8a28873","isDeleted":false,"likeCount":0,"name":"nodejs在M1报错","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063980293,"viewCount":185},{"content":"","createTime":1648286545073,"creativeType":"original","description":"js\n <a\n   href=\"skype:xxxx?chat\"\n \ttarget=\"_blank\"\n    rel=\"noreferrer\"\n    >\n</a   \n\n更换用户名即可","headerImg":"","id":"dca13c42-ae64-4bc6-b7ab-88bcfd223e53","isDeleted":false,"likeCount":0,"name":"js 打开skype","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063959005,"viewCount":189},{"content":"","createTime":1657873351947,"creativeType":"original","description":"LRU是Least Recently Used的缩写，即最近最少使用，是一种常见的缓存置换算法，淘汰最久未使用的数据。\n\n\n 实现思路\n\n1. 设定缓存的最大数据量maxSize\n\n2. 数据按照最近访问时间进行排序，最近访问的数据放在最后\n\n3. 访问时若数据存在则将数据移动到最后\n\n4. 添加数据时：\n\n   1. 数据存在，则移动到最后\n   2. 不存在，若队列中数据量已到最大值","headerImg":"//file.vwood.xyz/2022/07/15/upload_ejrh8m2zcd0hc0rgf622bffi7v8lqbn5.jpg","id":"38abab46-1f1d-47e0-9f3d-aeafdf41a0e7","isDeleted":false,"likeCount":0,"name":"js 实现 LRU缓存","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["LRU","js"],"updateTime":1658063913819,"viewCount":70},{"content":"","createTime":1653616647381,"creativeType":"original","description":"本文主要介绍自己在使用v2ray进行反向代理过程中。安装请参考官网[安装](https:www.v2ray.com/chapter_00/install.html)，主要实现通过中间服务器访问家里电脑上运行的服务。\n\n\n\n 原理\n\n- 假设在主机 A 中有一个网页服务器，这台主机没有公网 IP，无法在公网上直接访问。另有一台主机 B，它可以由公网访问。现在我们需要把 B 作为入口，把流","headerImg":"","id":"06a15352-9328-4916-9524-7d158dcf4088","isDeleted":false,"likeCount":0,"name":"v2ray反向代理","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["v2ray","代理"],"updateTime":1658063900096,"viewCount":188},{"content":"","createTime":1638107992736,"creativeType":"original","description":"css\n.text1 {\n/*单行*/\n\n  width:200px;\n  overflow:hidden;\n  text-overflow:ellipsis;\n  -o-text-overflow:ellipsis;\n  -webkit-text-overflow:ellipsis;\n  -moz-text-overflow:ellipsis;\n  white-space:nowrap;\n","headerImg":"","id":"a21482f9-6b85-4bdb-b652-19d115b9080d","isDeleted":false,"likeCount":0,"name":"css行数限制","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063885880,"viewCount":197},{"content":"","createTime":1650510288910,"creativeType":"original","description":"\n\n滚动加载数据就是说在达到某个条件的时候自动触发加载数据的动作，通常是滚动到页面底部的时候加载数据；\n\n代码如下：\n\njs\n  handleScroll = (e) ={\n    let layout = document.getElementById(\"layout\");\n\n    if (layout.clientHeight + layout.scrollTop >= layou","headerImg":"","id":"131d0d16-5692-403b-b949-87426c3d3f47","isDeleted":false,"likeCount":0,"name":"js 实现滚动加载数据","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063851344,"viewCount":181},{"content":"","createTime":1636124890100,"creativeType":"original","description":"\n本文主要是结合自己在学习中使用css来实现图片的宽高自适应，并给出相应的结局方案。\n\n 场景\n\n给定一系列图片，图片宽高不等，每行所展示的图片数量不等，如何实现图片的自适应。\n\n\n\n 实现方法\n\n聪明的你肯定会想到使用flex布局，并且设置flex-wrap: wrap。但如何做到自适应宽度呢：\n\n我们假设图片原始宽度、高度分别为width、heigh","headerImg":"//file.vwood.xyz/2022/07/11/upload_93g868jys6jvws4mixi2olc40hexurf4.jpg","id":"3891106a-2cff-4d0d-8efb-1930d43d48bc","isDeleted":false,"likeCount":0,"name":"如何使用css实现图片宽高自适应","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063691299,"viewCount":203},{"content":"","createTime":1636124673209,"creativeType":"original","description":"css实现文子颜色动态变化\n\n先看一下实际效果\n\n![在这里插入图片描述](https:file.vwood.xyz/2022/07/11/upload_wp5lk3zr88du1d6hhrpazda4mubtk40y.gif)\n\n\n\n实现代码\n\ncss\n.flow {\n    height: 120px;\n    background: linear-gradient(to right","headerImg":"//file.vwood.xyz/2022/07/11/upload_ffje1i8jz45jrdflr07i17fqm3vefjg0.jpg","id":"80a03a38-9f10-4cec-ac5d-138bd220ae3a","isDeleted":false,"likeCount":0,"name":"css实现文字颜色动态变化","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063681331,"viewCount":205},{"content":"","createTime":1652795036062,"creativeType":"original","description":">在画图工具中需要判断两个矩形是否相交\n\n<img src=\"https:file.vwood.xyz/2022/07/11/upload_ec1otndjo2fzjidbl1gncufpba4orxdy.png\" style=\"zoom:40%\">\n\n如上有两个矩形，中心点分别为O1(x1、y1)、O2(x2、y2)，宽高分别为(w1、h1)和(w2、h2)；\n\n要判断两个矩形是否相交，可以","headerImg":"https://static.vwood.xyz/blog/piqsels.com-id-zbivg.jpg","id":"ca307ea2-ce5f-46ea-8fdb-95fad4fd725b","isDeleted":false,"likeCount":0,"name":"判断两个矩形相交","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["矩形","相交"],"updateTime":1658063670222,"viewCount":234},{"content":"","createTime":1638020962954,"creativeType":"original","description":" minio 安装过程\n\n\n\n在使用minio前试过nextcloud，反复折腾后有问题，就转向了minio，minio的安装还是非常顺利\n\n\n\nDocker-compose.yml\n\nyml\n  minio:\n    image: \"minio/minio\"\n    hostname: minio\n    restart: always\n    volumes:\n      - ","headerImg":"//file.vwood.xyz/2022/07/12/upload_br39xic7v40y1d81g94egwtxkbtf43z7.jpg","id":"6691aca2-4e55-4403-a656-bd82eb45a5db","isDeleted":false,"likeCount":0,"name":"minio 安装过程","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1658063660432,"viewCount":247}],"latestBlogs":[{"id":"e1d7c155-b368-4258-95e9-f99eee92bad5","name":"react svg 导入错误","tags":[],"description":"","content":""},{"id":"14d5b2b4-514b-4b15-abfa-d03a1a8de9fa","name":"js 浏览器的保存功能","tags":[],"description":"","content":""},{"id":"1313e70b-ed6c-4a8e-bca2-2dc1948fc0ed","name":"css媒体查询新特性","tags":[],"description":"","content":""},{"id":"752f15d1-7325-40e3-817c-506b318c6693","name":"腾讯云服务器barad_agent卸载","tags":[],"description":"","content":""},{"id":"3c9c5db9-f2df-4096-886c-61243fcebf25","name":"css container 容器查询","tags":[],"description":"","content":""},{"id":"d4d53b2b-e674-43d0-9b6c-e88bbfea75f4","name":"css aspect-ratio使用","tags":[],"description":"","content":""},{"id":"204fab9b-434c-47fd-83cc-787a142e9309","name":"前端websocket中定时器使用","tags":[],"description":"","content":""},{"id":"28379fc5-a74f-428a-a849-35145a4f7c93","name":"Error: Cannot access contents of url \"\". Extension manifest must request permission to access this host.","tags":[],"description":"","content":""},{"id":"b543b2a1-6acf-4468-b9f4-14c54304c67c","name":"blob:http:// 的理解","tags":[],"description":"","content":""},{"id":"2df18b82-732d-4e55-b0e3-18d0e6a53ed2","name":"upyun nodejs上传文件","tags":[],"description":"","content":""}],"total":73},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}