{"pageProps":{"data":{"category":{"id":"cd4e8a1e-80d0-49d5-bbd6-d2bc7d7ce3e9","name":"前端"},"content":"\n给你二叉树的根节点 **root**，返回其节点值的层序遍历。(即逐层的从做向右访问所有节点)\n\n***示例1:**\n\n \n\n![](https://file.vwood.xyz/2023/05/16/upload_98qpc8rarf4tvwb3cq4844xd8echy2e0.jpeg)\n\n```\n输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[9,20],[15,7]]\n```\n\n**提示：**\n\n+ 树中节点数目在范围 `[0, 2000]` 内\n+ `-1000 <= Node.val <= 1000`\n\n\n\n```typescript\n/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction levelOrder(root: TreeNode | null): number[][] {\n\n};\n```\n\n\n\n**答案：**\n\n方法一：广度优先遍历\n\n```javascript\nconst levelOrder = (root) => {\n  const ret = [];\n  if (!root) {\n    return ret;\n  }\n  \n  const queue = [root];\n  while (queue.length) {\n    const currentLevelSize = queue.length;\n    ret.push([]);\n    for (let i = 1; i <= currentLevelSize; i++) {\n      const node = queue.shift();// 每次遍历完都推出当前层的元素\n      ret[ret.length - 1].push(node.val);\n      if (node.left) {\n        quque.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n    }\n  }\n  \n  return ret;\n}\n\n```\n\n方法二：深度优先遍历\n\n\n\n```javascript\nconst dfs = (root, setp, ret) => {\n  if (!ret[step]) {\n    ret[step] =[];\n  }\n  ret[step].push(root.val);\n  if (root.left) {\n    dfs(root.left, step + 1, ret);\n  }\n  if (root.right) {\n    dfs(root.right, step + 1, ret);\n  }\n  \n}\n\nconst levelOrder = (root) => {\n  const ret = [];\n  if (!root) {\n    return ret;\n  }\n  \n  return dfs(root, 0, ret);\n}\n```\n\n","createTime":1684251997685,"creativeType":"reprint","description":"\n给你二叉树的根节点 root，返回其节点值的层序遍历。(即逐层的从做向右访问所有节点)\n\n*示例1:\n\n \n\n![](https:file.vwood.xyz/2023/05/16/upload_98qpc8rarf4tvwb3cq4844xd8echy2e0.jpeg)\n\n\n输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[9,20","headerImg":"","id":"112b22af-34de-4f2a-b12d-029b948e9550","isDeleted":false,"likeCount":0,"name":"二叉树层序遍历","operator":{"avatar":"//file.vwood.xyz/2023/06/11/upload_ssaf3w2dlo0xox7alrcrca1704a6j2fn.jpg","description":"","email":"abelce@163.com","github":"https://github.com/abelce","id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorId":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["二叉树","层序遍历"],"updateTime":1684252090995,"viewCount":0},"id":"112b22af-34de-4f2a-b12d-029b948e9550","latestArticleList":[{"id":"0517a4cb-be8a-47a5-b7c2-da7904a4ba67","name":"docker使用postgres","tags":[],"description":"","content":""},{"id":"cd89eea1-6839-499b-8573-5a487afc48ef","name":"babel配置文件加载","tags":[],"description":"","content":""},{"id":"ef3bf6e0-6e9f-4704-8b9d-cdd4d1fa7a91","name":"typescript使用","tags":[],"description":"","content":""},{"id":"7b2f60f3-7b3e-4889-8062-30323d2af5cf","name":"git设置超时设置","tags":[],"description":"","content":""},{"id":"fac66413-5460-4a89-93dd-2a287ee1d14e","name":"babel配置文件加载过程","tags":[],"description":"","content":""}]},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}