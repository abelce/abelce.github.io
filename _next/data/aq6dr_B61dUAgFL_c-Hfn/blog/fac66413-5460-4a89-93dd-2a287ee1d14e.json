{"pageProps":{"data":{"category":{"id":"d1076f87-48a4-4952-8d53-a8632835f732","name":"babel"},"content":"本文主要讲述babel的配置文件及其加载过程。\n\nbabel在解析文件前会先加载配置信息，然后根据配置信息对源代码进行处理。\n\n## babel配置文件\nbabel配置文件[Config Files](https://babeljs.io/docs/config-files)\n\nbabel有两种配置文件，可以配合使用，也可以单独使用:\n\n+ 项目范围的配置\n  + `babel.config.*` 文件, 具有以下的扩展名: `.json` `.js`, `.cjs`, `.mjs`, `.cts`.\n+ 相对文件路径的配置\n  + `.babelrc.*` 文件, 具有以下的扩展名: `.json`, `.js`, `.cjs`, `.mjs`, `.cts`\n  + `.babelrc` 文件\n  + `package.json`文件，其中的key为`babel`\n\n\n### 项目级配置\n+ 在babel7中添加了`root`概念，默认为当前的工作目录，babel会自动的在根目录下搜索`babel.config.json`(或者其他扩展名的文件)，当然用户也可以通过`configFile`指定配置文件。\n+ 由于配置文件之间是物理隔离的，所以使用范围非常广泛。甚至允许`plguins`和`presets`轻松应用于`node_modules`或者是符号链接包中的文件\n+ 这种配置的缺点是它依赖于工作目录，在monorepos中使用就比较麻烦。\n\n### 相对文件路径的配置\n  babel从正在编译的文件`filename`目录开始搜索`.babelrc.json`或者其他等效的文件，该功能允许是为某一部分文件创建独立的配置。这些配置信息会被合并到项目级的配置中。\n\n使用文件相关配置时需要考虑一些边缘情况:\n+ 搜索范围是从`filename`所在目录向上直到找到最近的一个`.babelrc.json`文件或者遇到`package.json`就停止，因此相对配置仅适用于单个package.\n+ `filename`的路径必须在[`babelrcRoots`](https://babeljs.io/docs/options#babelrcroots)内，否则搜索将会直接跳过。\n\n注意事项：\n+ `.babelrc.json`仅适用于自己包之内的文件\n+ 除非您选择使用`babelrcRoots`，否则将忽略不是 Babel 'root' 的包中的 `.babelrc.json` 文件.\n\n\n## babel options\n这里介绍几个配置选项，更多选项参考官网[Config Options](https://babeljs.io/docs/options)\n+ [root](https://babeljs.io/docs/options#root): 默认值`process.cwd`，用来确定当前babel的根目录\n+ [rootMode](https://babeljs.io/docs/options#rootMode): 默认值为`\"root\"`，可选值为`\"root\"`、`\"upward\"`、`\"upward-optional\"`\n  该选项会与`root`值相结合，定义了babal如何选择其根目录。\n  + `\"root\"`: 将`\"root\"`值原样传递\n  + `\"upward\"`: 从`\"root\"`目录向上查找包含`babel.config.json`的文件目录，如果找不到就报错\n  + `\"upward-optional\"`: 从`\"root\"`目录向上查找包含`babel.config.json`的文件目录，如果找不到就使用`root`值作为babel的根目录。\n+ babelrc: 默认`true`，为`true`时允许搜索加载babelrc文件，当且仅当编译的文件在`\"babelrcRoots\"`提供的包之内时才会加载babelrc文件\n+ babelrcRoots: 默认值为`root`值，babel默认只能加载项目根目录下的babelrc，如果需要使用子包的babelrc可以在该选项中设置。\n+ configFile： 默认值`path.resolve(opts.root, \"babel.config.json\")`，默认搜索项目根目录下的`babel.config.json`文件。设置为`false`时不会加载`babel.config.json`文件，不推荐设置为babelrc的路径，因为babelrc本来就会被加载一次。\n\n## 配置文件加载过程\n\n1. 在`@babel/core`模块中的`transform-file.ts`文件中调用函数`transformFileRunner`。 调用`loadConfig`函数\n  \n```ts\n   const transformFileRunner = gensync(function* (\n  filename: string,\n  opts?: InputOptions,\n): Handler<FileResult | null> {\n  const options = { ...opts, filename };\n  // 加载options\n  const config: ResolvedConfig | null = yield* loadConfig(options);\n  if (config === null) return null;\n  // 读取文件\n  const code = yield* fs.readFile(filename, \"utf8\");\n  // 开始解析\n  return yield* run(config, code);\n});\n```\n2. 在`loadConfig`函数中`loadPrivatePartialConfig` --> `buildRootChain`\n3. 在`buildRootChain`中加载配置，如果指定了`configFile`就通过`loadConfig`加载，否则`opts.configFile !== false`时就自动搜索，依次调用`findRootConfig` --> `loadOneConfig`， `loadOneConfig`中会查找可能得扩展名文件(`.json` `.js`, `.cjs`, `.mjs`, `.cts`)\n\n buildRootChain 函数部分源码:\n ```ts\n  \n  // ......\n   let configFile;\n  // 是否指定 configFile，就加载对应文件\n  if (typeof opts.configFile === \"string\") {\n    // 指定了就去加载\n    configFile = yield* loadConfig(\n      opts.configFile,\n      context.cwd,\n      context.envName,\n      context.caller,\n    );\n  } else if (opts.configFile !== false) {\n    // configFile!== false时就搜索 babel.config.json等对应的文件\n    configFile = yield* findRootConfig(\n      context.root,\n      context.envName,\n      context.caller,\n    );\n  }\n ```\nloadOneConfig源码如下，`babel.config.*`文件只能存在一个，否则提示报错。\n ```ts\n function* loadOneConfig(\n  names: string[],\n  dirname: string,\n  envName: string,\n  caller: CallerMetadata | undefined,\n  previousConfig: ConfigFile | null = null,\n): Handler<ConfigFile | null> {\n    // names就是可能的配置文件列表\n  const configs = yield* gensync.all(\n    names.map(filename =>\n      readConfig(path.join(dirname, filename), envName, caller),\n    ),\n  );\n  const config = configs.reduce((previousConfig: ConfigFile | null, config) => {\n    if (config && previousConfig) {\n      // 配置文件只能存在一个，否则将报错\n      throw new ConfigError(\n        `Multiple configuration files found. Please remove one:\\n` +\n          ` - ${path.basename(previousConfig.filepath)}\\n` +\n          ` - ${config.filepath}\\n` +\n          `from ${dirname}`,\n      );\n    }\n\n    return config || previousConfig;\n  }, previousConfig);\n\n  if (config) {\n    debug(\"Found configuration %o from %o.\", config.filepath, dirname);\n  }\n  return config;\n}\n ```\n 上面就是项目级文件配置文件的加载过程。\n\n## 相对文件配置\n项目级配置文件加载完成后就加载`.babelrc`文件。\n\n1. `babelrc`为true或者不设置，并且`filename`为字符串时，向上查找第一个遇到的`package.json`，得到`pkgData`;\n2. 如果`pkgData`存在，并且允许加载`.babelrc`文件，再根据`pkgData`查找babelrc配置信息。\n3. `findRelativeConfig`函数获取最近的`.babelrc`文件信息。\n\n```ts\n   // \n  if ((babelrc === true || babelrc === undefined) && typeof context.filename === \"string\") {\n    const pkgData = yield* findPackageData(context.filename);\n\n    if (\n      pkgData &&\n      babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory)\n    ) {\n      ({ ignore: ignoreFile, config: babelrcFile } = yield* findRelativeConfig( // 从文件所有位置找到packageData.directories目录下第一个.babelrc文件，\n        pkgData,\n        context.envName,\n        context.caller,\n      ));\n\n      if (ignoreFile) {\n        fileChain.files.add(ignoreFile.filepath);\n      }\n\n      if (\n        ignoreFile &&\n        // 如果dirname再ignore中，标识该文件别忽略\n        shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) \n      ) {\n        isIgnored = true;\n      }\n\n      if (babelrcFile && !isIgnored) {\n        const validatedFile = validateBabelrcFile(babelrcFile);\n        const babelrcLogger = new ConfigPrinter();\n        const result = yield* loadFileChain(\n          validatedFile,\n          context,\n          undefined,\n          babelrcLogger,\n        );\n        if (!result) {\n          isIgnored = true;\n        } else {\n          babelRcReport = yield* babelrcLogger.output();\n          // 合并.babelrc的配置\n          mergeChain(fileChain, result);\n        }\n      }\n\n      if (babelrcFile && isIgnored) {\n        fileChain.files.add(babelrcFile.filepath);\n      }\n    }\n  }\n```\n\n获取到相对文件配置后会与项目配置进行合并，这样`filename`文件编译过程的配置信息就全部加载完成了，在后续的过程中会对配置信息进行校验和合并等一系列操作后才会开始源代码的解析。\n\n## 总结\nbabel的配置文件在通常情况下配置一种即可正常使用，在monorepos项目中根据子包情况对配置文件进行分割。\n\n## 参考文档\n[babel](https://babeljs.io/docs/config-files)","createTime":1699974017797,"creativeType":"original","description":"本文主要讲述babel的配置文件及其加载过程。\n\nbabel在解析文件前会先加载配置信息，然后根据配置信息对源代码进行处理。\n\n babel配置文件\nbabel配置文件[Config Files](https:babeljs.io/docs/config-files)\n\nbabel有两种配置文件，可以配合使用，也可以单独使用:\n\n+ 项目范围的配置\n  + babel.config.*","headerImg":"","id":"fac66413-5460-4a89-93dd-2a287ee1d14e","isDeleted":false,"likeCount":0,"name":"babel配置文件加载过程","operator":{"avatar":"//file.vwood.xyz/2023/06/11/upload_ssaf3w2dlo0xox7alrcrca1704a6j2fn.jpg","description":"","email":"1061225829@qq.com","github":"https://github.com/abelce","id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorId":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["babel","babelrc","babel.config"],"updateTime":1699974039852,"viewCount":0},"id":"fac66413-5460-4a89-93dd-2a287ee1d14e","latestArticleList":[{"id":"136338ed-c1f7-4127-ac2e-095c694cbb67","name":"升级macOS 13 Ventura系统后打开软件提示“已损坏，无法打开”解决方法","tags":[],"description":"","content":""},{"id":"ea2e43d0-d2c1-433e-b74f-1a163becef9d","name":"使用importmap实现在线代码编辑","tags":[],"description":"","content":""},{"id":"460fb164-5722-4cc2-ad6b-c35d5be4a670","name":"js提取iconfont项目的图标","tags":[],"description":"","content":""},{"id":"0517a4cb-be8a-47a5-b7c2-da7904a4ba67","name":"docker使用postgres","tags":[],"description":"","content":""},{"id":"cd89eea1-6839-499b-8573-5a487afc48ef","name":"babel配置文件加载","tags":[],"description":"","content":""}]},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}