{"pageProps":{"current":5,"blogs":[{"content":"","createTime":1638108132937,"creativeType":"original","description":"\n以前用disqus作为评论，由于墙的原因导致无法访问，就一直没有加上新的评论系统，国内的评论系统有些已经关掉了，也无法使用，所以就想自己写一个简单的评论系统，只是实现了最基本的功能，还有大量的工作没有做。先整理成如下笔记。\n\n 一、设计\n\n+ 前端\n\n  + 前端只需引入一个js文件就直接可以使用，类似disqus\n  + 一个用户多个站点的评论分别保存，不互相干扰\n  + 评论只有","id":"fbe0f089-a2dd-49d5-acad-d3cdd8e35aae","isDeleted":false,"likeCount":0,"name":"记一次评论系统开发过程","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":[],"updateTime":1657552329859,"viewCount":171},{"content":"","createTime":1657503681084,"creativeType":"original","description":"\n\n首先吐槽一下又拍云的文档，需要有亿点改进。\n\n由于我是前端上传，官网没有js sdk，所以需要结合后端来生成签名和policy。\n\n前端使用的是form api的方式上传。\n\n\n\n 后端\n\n直接上后端代码（golang）：\n\ngo\npackage application\n\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/md5\"\n\t\"crypto/sha1\"\n\t\"","id":"f6ea6c70-76ba-40fa-9f5b-792afbf7fe8b","isDeleted":false,"likeCount":0,"name":"记又拍云接入过程","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["又拍云","签名","policy"],"updateTime":1657503835129,"viewCount":74},{"content":"","createTime":1657425141610,"creativeType":"original","description":"以前的页面定位都是基于元素进行的，比如通过targetid，打开页面时自定定位到对应的位置。如果想定位到文本的某个位置并且高亮显示，这个就没法实现。\n\nchrome提供了一个新特性，支持基于文字内容的锚点技术。\n\n选中要分享的内容，然后右键会出现“ 复制指向突出显示的内容链接”。\n\n比如：我要喝“哇哈哈”饮料\n\n![](http:file.vwood.xyz/normal/WX2022071","id":"281b0b57-0e7e-4033-bcad-8b886535e127","isDeleted":false,"likeCount":0,"name":"chrome文字定位与::target-text样式设置","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["target-text","锚点"],"updateTime":1657447625933,"viewCount":114},{"content":"","createTime":1656914539482,"creativeType":"original","description":"bind的用法\n1、生成新的函数\n2、若生成的新函数作为构造函数，那么根传入的对象没有任何关系\n3、可以作为偏函数使用\n\nbind的js实现\ncode\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function(that) {\n        if (typeof this === 'function') {\n","id":"3b529a3e-13b9-4553-a454-13ce172dfedc","isDeleted":false,"likeCount":0,"name":"bind、call、apply实现","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["bing","call","apply"],"updateTime":1656914539482,"viewCount":122},{"content":"","createTime":1655801108776,"creativeType":"original","description":"通过border来实现。\n1. <code>border: 40px solid transparent</code>设置border的宽度和样式。\n2. <code>border-top-width</code>设置顶部的border宽度为0。\n3. <code>border-bottom-color: ff0000</code>设置底部border的颜色为红色\ncss\nwidth: 0","id":"020be9da-928a-40c9-b25a-fda6e1c182b1","isDeleted":false,"likeCount":0,"name":"css实现三角形","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["三角行","css"],"updateTime":1655971274067,"viewCount":159},{"content":"","createTime":1655800312939,"creativeType":"original","description":"很多页面滚动之后刷新页面会发现页面自动定位到了滚到的位置，但是有些交互需要刷新之后滚动到顶部，可以使用提供的*History.scrollRestoration *实现这个功能.\n\n+ <code>auto</code>: 将恢复用户已滚动到的页面上的位置。\n+ <code>manual</code>: 不还原页面上的位置，需要手动滚动。\n\njs\nif (history.scrollRest","id":"95e5f155-0a22-4bad-b6b6-3f81fa1fe2ac","isDeleted":false,"likeCount":0,"name":"History.scrollRestoration - 滚动恢复","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["scrollRestoration"],"updateTime":1655800347268,"viewCount":156},{"content":"","createTime":1655101892431,"creativeType":"original","description":"git commit报错：\njs\nnpm ERR! could not determine executable to run\n\nnpm ERR! A complete log of this run can be found in:\n\n可以删除.git目录下的hooks目录\njs\nm -rf .git/hooks\nnpm install\n","id":"a83733f2-0e08-4413-946e-0fb511c72e07","isDeleted":false,"likeCount":0,"name":"npm ERR! could not determine executable to run","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["npm","git"],"updateTime":1655101900342,"viewCount":165},{"content":"","createTime":1654401459954,"creativeType":"original","description":"安装brew时\nshell\n/bin/bash -c \"$(curl -fsSL https:raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n如果报错\nshell\nHEAD is now at 8175e404e Merge pull request 7942 from sjackman/bottl","id":"1ca537da-471f-4bbc-91a5-f802f3a36021","isDeleted":false,"likeCount":0,"name":"brew 报错 error: Not a valid ref: refs/remotes/origin/master 的解决方法","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["brew","安装","Not a valid ref"],"updateTime":1654401504964,"viewCount":174},{"content":"","createTime":1654046061196,"creativeType":"original","description":"\n 依赖注入在程序编写中常用于解决耦合问题，减少代码的复杂性，。\n\n在电商网站上买东西，下完单后就需要支付，可以选择微信、支付宝、信用卡等方式。最开始只有微信支付。\n\njs\nclass Order {\n  \n   微信支付\n  wechatPay() {\n    new WeChatPay().pay();\n  }\n  \n}\n\n\n一段时间之后需要接入支付宝、信用卡。每新增一种支","id":"9b0936a9-2557-4ce0-a4ba-3e67e405c023","isDeleted":false,"likeCount":0,"name":"依赖注入","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["依赖注入"],"updateTime":1654047697168,"viewCount":157},{"content":"","createTime":1653617042188,"creativeType":"original","description":"在写npm包的时候需要在脚本的第一行写上 !/usr/bin/env node ，用于指明该脚本文件要使用node来执行。\n\n/usr/bin/env 用来告诉用户到哪个目录下去寻找node，!/usr/bin/env node 可以让系统动态的去查找node，以解决不同机器不同用户设置不一致问题。\n\nPS： 该命令必须放在第一行， 否者不会生效","id":"807a7ba4-2cac-4b99-a926-c0bb590a6129","isDeleted":false,"likeCount":0,"name":"#!/usr/bin/env node的理解","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["/usr/bin/env","node"],"updateTime":1653617097293,"viewCount":172}],"latestBlogs":[{"id":"1f8598cd-9fdb-4d7c-b6b7-7cbca6424f20","name":"mac 命令行启动docker","tags":[],"description":"","content":""},{"id":"d142839e-7615-4266-874e-20da660013ed","name":"ECDSA host key for xx.xx.xx.xx has changed and you have requested strict checking. Host key verification failed.","tags":[],"description":"","content":""},{"id":"dd1b2427-b982-453e-9974-343efc09233b","name":"mac docker-compose up 报错","tags":[],"description":"","content":""},{"id":"bce956aa-267f-4f66-98cf-c52eb3f79752","name":"组件库与项目react版本冲突","tags":[],"description":"","content":""},{"id":"03b49f83-d393-4473-aacb-9b4e61651482","name":"error TS2300: Duplicate identifier 'LibraryManagedAttributes'.","tags":[],"description":"","content":""},{"id":"3f166e04-5e23-47c4-a8bb-c9e6c812ba34","name":"关于vwood","tags":[],"description":"","content":""},{"id":"67eb1db1-28cf-4ae6-9263-5aea9cb8b55e","name":"css伪类:not用法","tags":[],"description":"","content":""},{"id":"38abab46-1f1d-47e0-9f3d-aeafdf41a0e7","name":"js 实现 LRU缓存","tags":[],"description":"","content":""},{"id":"02eea954-494c-4c35-8f80-d34e70f87807","name":"低代码文章收集","tags":[],"description":"","content":""},{"id":"f6ea6c70-76ba-40fa-9f5b-792afbf7fe8b","name":"记又拍云接入过程","tags":[],"description":"","content":""}],"total":64},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{},"commentStore":{},"noteStore":{},"askStore":{},"stypeStore":{}},"__N_SSG":true}