{"pageProps":{"current":1,"blogs":[{"content":"","createTime":1692453681241,"creativeType":"original","description":"\n 介绍\n[Jotai](https:jotai.org/docs/introduction)是一种原子化的状态管理方案。采用的 Atom + hook + Context的方式来解决React的数据管理。\n\n当Atom更新的时候不会触发Context的更新，只会更新订阅了Atom的组件。\n\nJotai 有一个非常小的 API，并且是面向 TypeScript 的。 它","headerImg":"//file.vwood.xyz/2023/08/20/upload_sv0wcr8j84x8y9atlbdl8yhz6w85vpgs.png","id":"705e62c8-4c77-47af-bee2-2cb4eabb7948","isDeleted":false,"likeCount":0,"name":"jotai原理篇","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["jotai","状态管理"],"updateTime":1699773548753,"url":"","viewCount":0},{"content":"","createTime":1698561025965,"creativeType":"original","description":"在开发组件过程中，偶尔需要动态的插入css，比如在在iframe中渲染组件后，iframe中是没有样式的，所以需要手动插入样式。\n\n 插入样式\n\n通常是在useLayoutEffect中动态创建style标签\n\nts\n  useLayoutEffect(() ={\n    if (!ref.current) {\n      const style = document.creat","headerImg":"","id":"2d304261-a68b-4cf2-bbab-56efec4ba707","isDeleted":false,"likeCount":0,"name":"react动态插入样式","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["useStyle","let-hooks"],"updateTime":1698569961467,"url":"","viewCount":0},{"content":"","createTime":1695048707338,"creativeType":"original","description":"一个react hooks库，方便自己日常开发和使用","headerImg":"","id":"8052bec4-7240-4068-864d-243e8b71d918","isDeleted":false,"likeCount":0,"name":"自己打造的react hooks库: let-hooks","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["react","hooks","let-hooks"],"updateTime":1698560047426,"url":"","viewCount":0},{"content":"","createTime":1698559711171,"creativeType":"reprint","description":"在业务开发过程中，有时需要使用iframe，比如通过iframe来模拟页面，或者隔离样式。\n\n 渲染iframe\n下面的方式使用iframe是不生效的\ntsx\n<iframe>\n    <div></div>\n</iframe>\n\n因为iframe就相当于一个新的页面，所以要把组件添加渲染到iframe内部的dom上才有效果。\n所以通过srcDoc设置iframe的初始html","headerImg":"","id":"6fb6e255-cf4e-46f7-b65a-7ee57793d305","isDeleted":false,"likeCount":0,"name":"iframe在react中的使用","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["iframe","react"],"updateTime":1698559711171,"url":"","viewCount":0},{"content":"","createTime":1698558984850,"creativeType":"original","description":"\n最近在做SDK的时候，对模块进行解藕，模块之间的依赖关系就需要进行处理，使用到了依赖注入，所以记录一下。\n\n 一、 什么是依赖注入\n依赖注入就是基于调用方它所需要的事物。\n\n有两个模块Car、Enginer, Car依赖Enginer，实现方式可以如下，\n方案一：\n    \n\njs\n Enginer\nclass Enginer {\n\n}\n Car\nclass Car","headerImg":"","id":"faa29859-b26c-4737-af1c-f37ff0a7eafc","isDeleted":false,"likeCount":0,"name":"依赖注入","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["设计模式","依赖注入"],"updateTime":1698559016247,"url":"","viewCount":0},{"content":"","createTime":1697639370378,"creativeType":"original","description":"本文介绍React更新的baseState，阐述baseState在updateQueue中的作用，以及工作原理。\n\n首先React中任务有着不同的优先级，优先级高的任务先执行，低的后执行。所以会出现先创建的任务后执行的情况。比如下面的例子：\n\nA1 -B2 -> C1 -> D2\n\n其中数字越小优先级越高，所以A1和C1 会优先执行，执行完后的更新队列就如下：\n\nB","headerImg":"","id":"fbd908c6-d6e4-4158-9581-fe08ac759e84","isDeleted":false,"likeCount":0,"name":"baseState与baseUpdate.md","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["react","baseState","updateQueue"],"updateTime":1697728338268,"url":"","viewCount":0},{"content":"","createTime":1659843243720,"creativeType":"original","description":" 命令行启动docker\n查看docker\nsh\nlaunchctl list | grep docker\n\n-\t0\tcom.docker.helper\n77699\t0\tapplication.com.docker.docker.739798.740119\n\n\n关闭dockerr\nsh\nlaunchctl stop application.com.docker.docker.","headerImg":"","id":"1f8598cd-9fdb-4d7c-b6b7-7cbca6424f20","isDeleted":false,"likeCount":0,"name":"docker常用命令行","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["docker","命令","卡住"],"updateTime":1697638757540,"url":"","viewCount":49},{"content":"","createTime":1694614359766,"creativeType":"original","description":"最近在做网页聊天挂件时，挂件里的消息滚动在最顶部或者最底部时整个网页就是跟随滚动，体验非常不好。\n下面给一个GIF的例子\n\n![file.vwood.xyz/2023/09/13/upload_jz5m2b1k75xbqd69ymz04ba1r1dnj486.gif](file.vwood.xyz/2023/09/13/upload_jz5m2b1k75xbqd69ymz04ba1r1dn","headerImg":"","id":"da751d13-6717-41fd-a556-c311a1e24494","isDeleted":false,"likeCount":0,"name":"overscroll-behavior阻止容器滚动","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["overscroll-behavior","contain"],"updateTime":1694620808106,"url":"","viewCount":0},{"content":"","createTime":1692892128577,"creativeType":"original","description":"\nclip类似于hidden，内容将以元素的边距盒进行裁剪。clip 和 hidden 之间的区别是 clip 关键字禁止所有滚动，包括以编程方式的滚动。该盒子不是一个滚动的容器，并且不会启动新的格式化上下文。而hidden是一个滚动的容器，可以通过js来操控元素的滚动。\n\n下面是一个在线例子：\n\n<iframe src=\"https:codesandbox.io/embed/ov","headerImg":"","id":"f9b88b86-08c8-46d7-9398-35520cae75e9","isDeleted":false,"likeCount":0,"name":"overflow:clip和overflow-clip-margin的介绍","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["overflow:clip","overflow-clip-margin"],"updateTime":1692892128577,"url":"","viewCount":0},{"content":"","createTime":1661266672283,"creativeType":"original","description":"做个人项目时，由于服务器网速原因，前端打包后直接将所有资源直接访问服务器上访问就比较慢，所以可以将静态资源传递到cdn上，选择了upyun（因为有免费额度）。\n\n步骤如下：\n1. 建立连接\n2. 找到要上传文件路径\n3. 上传文件\n\n直接看代码：\n\njavascript\nconst upyun = require(\"upyun\");\nconst fs = require(\"fs\");\nc","headerImg":"","id":"2df18b82-732d-4e55-b0e3-18d0e6a53ed2","isDeleted":false,"likeCount":0,"name":"upyun nodejs上传文件","operator":{"id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorID":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["upyun","又拍云","node"],"updateTime":1692803902508,"url":"","viewCount":13}],"latestBlogs":[{"id":"2d304261-a68b-4cf2-bbab-56efec4ba707","name":"react动态插入样式","tags":[],"description":"","content":""},{"id":"6fb6e255-cf4e-46f7-b65a-7ee57793d305","name":"iframe在react中的使用","tags":[],"description":"","content":""},{"id":"faa29859-b26c-4737-af1c-f37ff0a7eafc","name":"依赖注入","tags":[],"description":"","content":""},{"id":"fbd908c6-d6e4-4158-9581-fe08ac759e84","name":"baseState与baseUpdate.md","tags":[],"description":"","content":""},{"id":"8052bec4-7240-4068-864d-243e8b71d918","name":"自己打造的react hooks库: let-hooks","tags":[],"description":"","content":""},{"id":"da751d13-6717-41fd-a556-c311a1e24494","name":"overscroll-behavior阻止容器滚动","tags":[],"description":"","content":""},{"id":"f9b88b86-08c8-46d7-9398-35520cae75e9","name":"overflow:clip和overflow-clip-margin的介绍","tags":[],"description":"","content":""},{"id":"28e7fc5d-ef66-4eed-858c-b2d600c1c5de","name":"display:contents","tags":[],"description":"","content":""},{"id":"8adc7054-20dc-4f73-bcea-f7365f91ed7c","name":"docker pull 慢","tags":[],"description":"","content":""},{"id":"705e62c8-4c77-47af-bee2-2cb4eabb7948","name":"jotai原理篇","tags":[],"description":"","content":""}],"total":97},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}