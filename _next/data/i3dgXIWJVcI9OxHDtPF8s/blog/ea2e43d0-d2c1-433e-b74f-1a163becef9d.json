{"pageProps":{"data":{"category":{"id":"6dd4c338-efc2-4ae7-8ccc-b3d8006257f0","name":"javascript"},"content":"\n\n在ES module中可以通过`import`来引入模块，通过相对或者绝对路径加载.\n```js\nimport lodash from \"https://esm.sh/lodash\";\n```\n\n可当使用webpack等打包工具时明知需要使用 `import lodash from \"lodash\"`的方式就能加载对应的文件，这些工具通过nodejs在构建时映射到特定的文件，就能解决模块自动加问题。\n\n所以在浏览器中要只要解决了映射问题，就可以使用相同的方式引入模块。\n\n\n## importmap\n\n在`<script>`中指定type为`importmap`，再通过JSON对象指定所有模块的映射，\n```html\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"lodash\": \"https://esm.sh/lodash\",\n  }\n}\n</script>\n<script type=\"module\">\n  import lodash from 'lodash';\n\n console.log(lodash.sortBy([3, 2, 1]))\n</script>\n```\n映射的值必须是`./`、`../`、 `/`或者绝对URL。同时`imports`中的包并不一定会加载，只有在其他文件中使用了的包才会加载，未被其他脚本使用的包不会加载。\n\n\n#### scopes\n`imports`指定的映射是全局的，当某些文件需要老版本的`lodash`时， 通过`scopes`来指定。这里指定`/v1/`路径下的文件使用`3.0.0`版本。\n\n```html\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"lodash\": \"https://esm.sh/lodash\",\n  },\n  \"scopes\": {\n    \"/v1/\": {\n         \"lodash\": \"https://esm.sh/lodash@3.0.0\",\n    }\n  }\n}\n</script>\n```\n\n## importmap兼容性\n\n目前主流的浏览器除了IE都支持，所以可以放心使用。\n\n![](http://file.vwood.xyz/2023/12/15/upload_t6qde87qqpmu7m4onbckhhhb08oc4gir.png)\n\n## 如何用importmap实现代码加载\n通过上面的介绍，要实现一个简易的在线代码编辑，同时能引入各种资源包就比较容易了。\n\n如下react代码，通过import引入`react`、`react-dom`，由于没有提前加载，代码会直接报错\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\nconst App = () => {\n    return <div>hello</div>\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n```\n\n所以使用`importmap`提前导入即可。\n\n```html\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"react\": \"https://esm.sh/react\",\n    \"react-dom\": \"https://esm.sh/react-dom\"\n  }\n}\n</script>\n```\n\n但是如果要使用其他的模块，比如`lodash`，那就需要提前手动导入，所以局限性很大。\n\n在线编辑`react`，由于使用`jsx`语法，所以使用了`@babel/standalone`，在线转换`jsx`。由于`babel`会先将代码生成`ast`，所以可以编写一个`plugin`来收集代码中的`import`数据。\n将自定义`collectImportPlugin`注册到babel上，编译时收集依赖。\n```js\nimport * as Babel from \"@babel/standalone\";\nlet scriptImports = [];\n\nexport const collectImportPlugin = () => {\n  return {\n    visitor: {\n      ImportDeclaration(path) {\n        scriptImports.push(path.node.source.value);\n      },\n    },\n  };\n};\n\nBabel.registerPlugin(\"collectImportPlugin\", collectImportPlugin);\n```\n上面的插件收集的结果为`[\"react\", \"react-dom\"]`，如果同时依赖`lodash`,结果就是`[\"react\", \"react-dom\", \"lodash\"]`\n\n因为`https://esm.sh`上我们日常使用的包都能获取到，所以这里直接从`https://esm.sh`加载数据。拼接后就是上面的`importmap`代码:\n```html\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"react\": \"https://esm.sh/react\",\n    \"react-dom\": \"https://esm.sh/react-dom\",\n    \"lodash\": \"https://esm.sh/lodash\"\n  }\n}\n</script>\n```\n\n\n预览效果：\n\n<iframe height=\"300\" width=\"100%\" style=\"width:100%;border:none;\" scrolling=\"no\" \nsrc=\"https://vwood.xyz/tiny-code/embed/2095903a-a970-4084-b4cd-642afc042b3c\" \nframeborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n</iframe>","createTime":1702711607932,"creativeType":"original","description":"\n\n在ES module中可以通过import来引入模块，通过相对或者绝对路径加载.\njs\nimport lodash from \"https:esm.sh/lodash\";\n\n\n可当使用webpack等打包工具时明知需要使用 import lodash from \"lodash\"的方式就能加载对应的文件，这些工具通过nodejs在构建时映射到特定的文件，就能解决模块自动加","headerImg":"","id":"ea2e43d0-d2c1-433e-b74f-1a163becef9d","isDeleted":false,"likeCount":0,"name":"使用importmap实现在线代码编辑","operator":{"avatar":"//file.vwood.xyz/2023/06/11/upload_ssaf3w2dlo0xox7alrcrca1704a6j2fn.jpg","description":"","email":"1061225829@qq.com","github":"https://github.com/abelce","id":"96f16846-31f2-489c-9af0-d4ca13e836e4","name":"文钦"},"operatorId":"96f16846-31f2-489c-9af0-d4ca13e836e4","tags":["importmap"],"updateTime":1702711752107,"viewCount":0},"id":"ea2e43d0-d2c1-433e-b74f-1a163becef9d","latestArticleList":[{"id":"ea2e43d0-d2c1-433e-b74f-1a163becef9d","name":"使用importmap实现在线代码编辑","tags":[],"description":"","content":""},{"id":"460fb164-5722-4cc2-ad6b-c35d5be4a670","name":"js提取iconfont项目的图标","tags":[],"description":"","content":""},{"id":"0517a4cb-be8a-47a5-b7c2-da7904a4ba67","name":"docker使用postgres","tags":[],"description":"","content":""},{"id":"cd89eea1-6839-499b-8573-5a487afc48ef","name":"babel配置文件加载","tags":[],"description":"","content":""},{"id":"ef3bf6e0-6e9f-4704-8b9d-cdd4d1fa7a91","name":"typescript使用","tags":[],"description":"","content":""}]},"initialMobxState":{"userStore":{"currentUser":null,"users":[],"token":"","qiniuToken":"","userCount":0,"productCount":0,"commentCount":0,"settingType":"products"},"productStore":{"products":[],"total":0,"type":"","url":"","current":1,"product":null,"likesMap":{},"tabpane":"all","token":"","loading":false,"todayHunters":[],"today":[],"yesterday":[],"relatedProducts":[],"search":""},"commentStore":{"comments":[],"total":0,"current":0},"noteStore":{"token":"","notes":[],"total":0,"note":null},"askStore":{"token":"","asks":[],"total":0,"ask":null},"stypeStore":{"data":[]}},"__N_SSG":true}